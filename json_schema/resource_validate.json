{
    "$schema": "http://json-schema.org/draft-07/schema",
    "title": "Resource Schema",
    "description": "It include provider_name,name,imports and schemas.",
    "required": [ "provider_name","name","imports","unique_attribute","schemas" ],
    "type" :"object",
    "additionalProperties": false,
    "properties": {
        "provider_name":{
            "type":"string",
            "title": "Provider Name",
            "description": "Enter Provider name.",
            "examples": ["Aws","Gcp"]
        },
        "name":{
            "type":"string",
            "title": "Resource Name",
            "description": "Enter Resource name.",
            "examples": ["tenant","application_profile"]
        },
        "imports":{
            "type":"array",
            "title": "Import Links",
            "description": "Enter import links of modules.",
            "items": {
                "type": "string"
              },
            "uniqueItems": true,
            "examples": [ "github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema",
                          "github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
                        ]
        },
        "unique_attribute":{
            "type":"array",
            "title": "Unique Attributes",
            "description": "Enter unique attributes for parallel testing.",
            "items": {
                "type": "string"
              },
            "uniqueItems": true,
            "examples": [ "contract",
                          "filter",
                          "filter_entry"
                        ]
        },
        "schemas":{
            "type":"array",
            "items": {
                "type": "object",
                "title": "Schemas",
                "description": "Resource Schema",
                "required": ["attribute","type"],
                "properties": {
                    "attribute": {
                        "type": "string",
                        "title": "attribute",
                        "description": "Enter attribute name."
                    },
                    "type": {
                        "type": "string",
                        "title": "Type",
                        "description": "Type of the attribute.",
                        "pattern": "string|bool|float|int|list|set|map",
                        "enum": ["string","bool","float","int","list","set","map"]
                    },
                    "forcenew": {
                        "type": "boolean",
                        "title": "ForceNew",
                        "description": "ForceNew indicates that any change in this field requires the resource to be destroyed and recreated.",
                        "pattern": "true",
                        "enum":[true]

                    },
                    "computed": {
                        "type": "boolean",
                        "title": "Computed",
                        "description": "Computed is used to represent values that are not user configurable.",
                        "pattern": "true",
                        "enum":[true]
                    },
                    "sensitive": {
                        "type": "boolean",
                        "title": "Sensitive",
                        "description": "When working with a field that contains information likely to be considered sensitive, it is best to set the Sensitive property on its schema to true. This will prevent the field's values from showing up in CLI output and in Terraform Cloud.",
                        "pattern": "true",
                        "enum":[true]
                    },
                    "default":{
                        "type": ["number","string"],
                        "title": "Default",
                        "description": "Terraform will use that value when this item is not set in the configuration."
                    },
                    "description": {
                        "type": "string",
                        "title": "Description",
                        "description": "Enter description of attribute"
                    },
                    "validation":{
                        "type":"object",
                        "title": "Validation",
                        "description": "Validation for the primitive datatypes of schema.",
                        "required": ["func_name"],
                        "properties": {
                            "func_name":{
                                "type":"string",
                                "title": "ValidateFunc Name",
                                "description": "ValidateDiagFunc is a function used to validate the value of a primitive type. Common use cases include ensuring an integer falls within a range or a string value is present in a list of valid options. The function returns a collection of Diagnostics. More Info: https://pkg.go.dev/github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation",
                                "pattern":"IsCIDR|IsIPAddress|IsIPv4Address|IsIPv6Address|IsMACAddress|IsPortNumber|IsPortNumberOrZero|IsRFC3339Time|IsURLWithHTTPS|IsURLWithHTTPorHTTPS|IsUUID|StringIsBase64|StringIsJSON|StringIsValidRegExp|StringInSlice|StringNotInSlice|IsCIDRNetwork|IntBetween|FloatBetween",
                                "enum":["IsCIDR","IsIPAddress","IsIPv4Address","IsIPv6Address","IsMACAddress","IsPortNumber","IsPortNumberOrZero","IsRFC3339Time","IsURLWithHTTPS","IsURLWithHTTPorHTTPS","IsUUID","StringIsBase64","StringIsJSON","StringIsValidRegExp","StringInSlice","StringNotInSlice","IsCIDRNetwork","IntBetween","FloatBetween"]
                            }
                        },
                        "if": {
                            "properties": { "func_name": { "pattern":"StringInSlice|StringNotInSlice|IsCIDRNetwork|IntBetween|FloatBetween","enum":["StringInSlice","StringNotInSlice","IsCIDRNetwork","IntBetween","FloatBetween"]} }
                        },
                        "then": {
                            "if":{
                                "properties": { "func_name": { "pattern":"StringInSlice|StringNotInSlice","enum":["StringInSlice","StringNotInSlice"]} }
                            },
                            "then":{
                                "properties": {
                                    "ignore_case":{
                                        "type":"boolean",
                                        "title": "Ignore Case",
                                        "description": "StringInSlice/StringNotInSlice returns a SchemaValidateFunc which tests if the provided value is of type string and matches/not matches the value of an element in the valid slice will test with in lower case if ignoreCase is true",
                                        "pattern":"true|false",
                                        "enum": [true,false]
                                    },
                                    "params":{
                                        "type":"array",
                                        "title": "Parameters",
                                        "description": "Enter array of values.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "uniqueItems": true
                                    }
                                },
                                "required": ["ignore_case","params"]
                            },
                            "else":{
                                "properties": {
                                    "params":{
                                        "type":"array",
                                        "title": "Parameters",
                                        "description": "Enter two values in array",
                                        "maxItems": 2,
                                        "uniqueItems": true
                                    }
                                },
                                "required": ["params"]
                            }
                        },
                        "else":{
                            "not":{
                                "properties": {
                                    "ignore_case":{
                                        "type":"boolean"},
                                    "params":{
                                        "type":"array"
                                    }
                                },
                                "required": ["ignore_case","params"]
                            }
                        }
                    },
                    "depends_on":{
                        "type":"object",
                        "title": "Dependency",
                        "description": "Enter dependent resource name with hierarchy of attributes",
                        "required": ["resource_name","attribute_name"],
                        "properties": {
                            "resource_name": {
                                "type": "string",
                                "title": "Dependent resource",
                                "description": "Enter Dependent Resource Name "
                            },
                            "attribute_name":{
                                "type":"array",
                                "title": "Dependent attributes",
                                "description": "Enter attributes hierarchy of the dependent resource in array form.",
                                "items": {
                                    "type": "string"
                                },
                                "uniqueItems": true
                            }
                        }
                    }
                },
                "if": {
                        "properties": { "type": { "pattern":"list|set|map"} }                        
                },
                "then":{
                        "title": "Element",
                        "properties": { 
                            "element":{
                                "type":"object",
                                "title": "Internal Elem",
                                "description": "Internal Elem for Type(List/Set/Map).",
                                "properties": {
                                    "type":{
                                        "type":"string",
                                        "title": "Schema Type",
                                        "description": "Schema type as Resource/Schema for Elem in Type(List/Set/Map).",
                                        "pattern": "resource|schema",
                                        "enum": ["resource", "schema"]
                                    }
                                },
                                "required":["type","schema"],
                                "if":{
                                    "properties": { "type": { "pattern":"resource"} }
                                },
                                "then":{
                                    "properties": {
                                        "schema":{
                                            "type":"array",
                                            "title": "Internal Schema Resource for Type(List/Set/Map).",
                                            "description": "Resource",
                                            "items": {
                                                "type": "object",
                                                "$ref": "#/$defs/resource"
                                            }
                                        }
                                    },
                                    "required": ["schema"]
                                },
                                "else":{
                                    "properties": {
                                        "schema":{
                                            "type": "object",
                                            "title": "Internal Schema Schema for Type(List/Set/Map).",
                                            "description": "Schema",
                                            "$ref": "#/$defs/schema"
                                        }
                                    },
                                    "required": ["schema"]
                                }
                            }
                        },
                        "required": ["element"]
                },
                "else": {
                    "not": {
                        "properties": { 
                            "element":{
                                "type":"object",
                                "properties": {
                                    "type":{
                                        "type":"string",
                                        "enum": ["resource", "schema"]
                                    },
                                    "schema":{
                                        "type":"array",
                                        "items": {
                                            "type": "object",
                                            "$ref": "#/$defs/resource"
                                        }
                                    }
                                }
                            }
                        } ,
                        "required": ["element"]
                    }
                },
                "oneOf": [
                    {
                        "type": "object",
                        "properties": {
                            "optional": { 
                                "type": "boolean",
                                "title": "Optional",
                                "description": "Indicates that this element is optional to include in the configuration.",
                                "pattern": "true",
                                "enum":[true]
                            }
                        }
                    },
                    {
                        "type": "object",
                        "properties": {
                            "required": { 
                                "type": "boolean",
                                "title": "Required",
                                "description": "Indicates that this element must be provided in the configuration.",
                                "pattern": "true",
                                "enum":[true]
                            }
                        }
                    }
                ],
                "allOf": [
                    {                   
                        "oneOf": [
                            {
                                "type": "object",
                                "properties": {
                                    "max_items":{
                                        "type": "number",
                                        "title": "Maximum Items",
                                        "description": "MaxItems defines a maximum amount of items that can exist within a TypeSet or TypeList."
                                    }
                                }
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "min_items":{
                                        "type": "number",
                                        "title": "Minimum Items",
                                        "description": "MinItems defines a minimum amount of items that can exist within a TypeSet or TypeList."
                                    }
                                }
                            }
                        ]
                    }
                ]
            }
        }
    },
    "$defs":{
        "schema":{
            "$id":"https://example.com/schema",
            "$schema": "http://json-schema.org/draft-07/schema",
            "type": "object",
                "title": "Schemas",
                "description": "Internal Schema Schema",
                "required": ["type"],
                "properties": {
                    "type": {
                        "type": "string",
                        "title": "Type",
                        "description": "Type of the attribute.",
                        "pattern": "string|bool|float|int",
                        "enum": ["string","bool","float","int"]
                    },
                    "default":{
                        "type": "number",
                        "title": "Default",
                        "description": "Terraform will use that value when this item is not set in the configuration."
                    },
                    "validation":{
                        "type":"object",
                        "title": "Validation",
                        "description": "Validation for the primitive datatypes of schema.",
                        "required": ["func_name"],
                        "properties": {
                            "func_name":{
                                "type":"string",
                                "title": "ValidateFunc Name",
                                "description": "ValidateDiagFunc is a function used to validate the value of a primitive type. Common use cases include ensuring an integer falls within a range or a string value is present in a list of valid options. The function returns a collection of Diagnostics. More Info: https://pkg.go.dev/github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation",
                                "pattern":"IsCIDR|IsIPAddress|IsIPv4Address|IsIPv6Address|IsMACAddress|IsPortNumber|IsPortNumberOrZero|IsRFC3339Time|IsURLWithHTTPS|IsURLWithHTTPorHTTPS|IsUUID|StringIsBase64|StringIsJSON|StringIsValidRegExp|StringInSlice|StringNotInSlice|IsCIDRNetwork|IntBetween|FloatBetween",
                                "enum":["IsCIDR","IsIPAddress","IsIPv4Address","IsIPv6Address","IsMACAddress","IsPortNumber","IsPortNumberOrZero","IsRFC3339Time","IsURLWithHTTPS","IsURLWithHTTPorHTTPS","IsUUID","StringIsBase64","StringIsJSON","StringIsValidRegExp","StringInSlice","StringNotInSlice","IsCIDRNetwork","IntBetween","FloatBetween"]
                            }
                        },
                        "if": {
                            "properties": { "func_name": { "pattern":"StringInSlice|StringNotInSlice|IsCIDRNetwork|IntBetween|FloatBetween","enum":["StringInSlice","StringNotInSlice","IsCIDRNetwork","IntBetween","FloatBetween"]} }
                        },
                        "then": {
                            "if":{
                                "properties": { "func_name": { "pattern":"StringInSlice|StringNotInSlice","enum":["StringInSlice","StringNotInSlice"]} }
                            },
                            "then":{
                                "properties": {
                                    "ignore_case":{
                                        "type":"boolean",
                                        "title": "Ignore Case",
                                        "description": "StringInSlice/StringNotInSlice returns a SchemaValidateFunc which tests if the provided value is of type string and matches/not matches the value of an element in the valid slice will test with in lower case if ignoreCase is true",
                                        "enum": [true,false]
                                    },
                                    "params":{
                                        "type":"array",
                                        "title": "Parameters",
                                        "description": "Enter array of values.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "uniqueItems": true
                                    }
                                },
                                "required": ["ignore_case","params"]
                            },
                            "else":{
                                "properties": {
                                    "params":{
                                        "type":"array",
                                        "title": "Parameters",
                                        "description": "Enter two values in array",
                                        "maxItems": 2,
                                        "uniqueItems": true
                                    }
                                },
                                "required": ["params"]
                            }
                        },
                        "else":{
                            "not":{
                                "properties": {
                                    "ignore_case":{
                                        "type":"boolean"},
                                    "params":{
                                        "type":"array"
                                    }
                                },
                                "required": ["ignore_case","params"]
                            }
                        }
                    }
                }
        },
        "resource":{
            "$id":"https://example.com/resource",
            "$schema": "http://json-schema.org/draft-07/schema",
            "type": "object",
                "title": "Internal Resource Schema",
                "description": "Resource Schema",
                "required": ["attribute","type"],
                "properties": {
                    "attribute": {
                        "type": "string",
                        "title": "attribute",
                        "description": "Enter attribute name."
                    },
                    "type": {
                        "type": "string",
                        "title": "Type",
                        "description": "Type of the attribute.",
                        "pattern": "string|bool|float|int|list|set|map",
                        "enum": ["string","bool","float","int","list","set","map"]
                    },
                    "forcenew": {
                        "type": "boolean",
                        "title": "ForceNew",
                        "description": "ForceNew indicates that any change in this field requires the resource to be destroyed and recreated.",
                        "pattern": "true",
                        "enum":[true]

                    },
                    "computed": {
                        "type": "boolean",
                        "title": "Computed",
                        "description": "Computed is used to represent values that are not user configurable.",
                        "pattern": "true",
                        "enum":[true]
                    },
                    "sensitive": {
                        "type": "boolean",
                        "title": "Sensitive",
                        "description": "When working with a field that contains information likely to be considered sensitive, it is best to set the Sensitive property on its schema to true. This will prevent the field's values from showing up in CLI output and in Terraform Cloud.",
                        "pattern": "true",
                        "enum":[true]
                    },
                    "default":{
                        "type": ["number","string"],
                        "title": "Default",
                        "description": "Terraform will use that value when this item is not set in the configuration."
                    },
                    "description": {
                        "type": "string",
                        "title": "Description",
                        "description": "Enter description of attribute"
                    },
                    "validation":{
                        "type":"object",
                        "title": "Validation",
                        "description": "Validation for the primitive datatypes of schema.",
                        "required": ["func_name"],
                        "properties": {
                            "func_name":{
                                "type":"string",
                                "title": "ValidateFunc Name",
                                "description": "ValidateDiagFunc is a function used to validate the value of a primitive type. Common use cases include ensuring an integer falls within a range or a string value is present in a list of valid options. The function returns a collection of Diagnostics. More Info: https://pkg.go.dev/github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation",
                                "pattern":"IsCIDR|IsIPAddress|IsIPv4Address|IsIPv6Address|IsMACAddress|IsPortNumber|IsPortNumberOrZero|IsRFC3339Time|IsURLWithHTTPS|IsURLWithHTTPorHTTPS|IsUUID|StringIsBase64|StringIsJSON|StringIsValidRegExp|StringInSlice|StringNotInSlice|IsCIDRNetwork|IntBetween|FloatBetween",
                                "enum":["IsCIDR","IsIPAddress","IsIPv4Address","IsIPv6Address","IsMACAddress","IsPortNumber","IsPortNumberOrZero","IsRFC3339Time","IsURLWithHTTPS","IsURLWithHTTPorHTTPS","IsUUID","StringIsBase64","StringIsJSON","StringIsValidRegExp","StringInSlice","StringNotInSlice","IsCIDRNetwork","IntBetween","FloatBetween"]
                            }
                        },
                        "if": {
                            "properties": { "func_name": { "pattern":"StringInSlice|StringNotInSlice|IsCIDRNetwork|IntBetween|FloatBetween","enum":["StringInSlice","StringNotInSlice","IsCIDRNetwork","IntBetween","FloatBetween"]} }
                        },
                        "then": {
                            "if":{
                                "properties": { "func_name": { "pattern":"StringInSlice|StringNotInSlice","enum":["StringInSlice","StringNotInSlice"]} }
                            },
                            "then":{
                                "properties": {
                                    "ignore_case":{
                                        "type":"boolean",
                                        "title": "Ignore Case",
                                        "description": "StringInSlice/StringNotInSlice returns a SchemaValidateFunc which tests if the provided value is of type string and matches/not matches the value of an element in the valid slice will test with in lower case if ignoreCase is true",
                                        "pattern":"true|false",
                                        "enum": [true,false]
                                    },
                                    "params":{
                                        "type":"array",
                                        "title": "Parameters",
                                        "description": "Enter array of values.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "uniqueItems": true
                                    }
                                },
                                "required": ["ignore_case","params"]
                            },
                            "else":{
                                "properties": {
                                    "params":{
                                        "type":"array",
                                        "title": "Parameters",
                                        "description": "Enter two values in array",
                                        "maxItems": 2,
                                        "uniqueItems": true
                                    }
                                },
                                "required": ["params"]
                            }
                        },
                        "else":{
                            "not":{
                                "properties": {
                                    "ignore_case":{
                                        "type":"boolean"},
                                    "params":{
                                        "type":"array"
                                    }
                                },
                                "required": ["ignore_case","params"]
                            }
                        }
                    },
                    "depends_on":{
                        "type":"object",
                        "title": "Dependency",
                        "description": "Enter dependent resource name with hierarchy of attributes",
                        "required": ["resource_name","attribute_name"],
                        "properties": {
                            "resource_name": {
                                "type": "string",
                                "title": "Dependent resource",
                                "description": "Enter Dependent Resource Name "
                            },
                            "attribute_name":{
                                "type":"array",
                                "title": "Dependent attributes",
                                "description": "Enter attributes hierarchy of the dependent resource in array form.",
                                "items": {
                                    "type": "string"
                                },
                                "uniqueItems": true
                            }
                        }
                    }
                },
                "if": {
                        "properties": { "type": { "pattern":"list|set|map"} }                        
                },
                "then":{
                        "title": "Element",
                        "properties": { 
                            "element":{
                                "type":"object",
                                "title": "Internal Elem",
                                "description": "Internal Elem for Type(List/Set/Map).",
                                "properties": {
                                    "type":{
                                        "type":"string",
                                        "title": "Schema Type",
                                        "description": "Schema type as Resource/Schema for Elem in Type(List/Set/Map).",
                                        "pattern": "resource|schema",
                                        "enum": ["resource", "schema"]
                                    }
                                },
                                "required":["type","schema"],
                                "if":{
                                    "properties": { "type": { "pattern":"resource"} }
                                },
                                "then":{
                                    "properties": {
                                        "schema":{
                                            "type":"array",
                                            "title": "Internal Schema Resource for Type(List/Set/Map).",
                                            "description": "Resource",
                                            "items": {
                                                "type": "object",
                                                "$ref": "#/$defs/resource"
                                            }
                                        }
                                    },
                                    "required": ["schema"]
                                },
                                "else":{
                                    "properties": {
                                        "schema":{
                                            "type": "object",
                                            "title": "Internal Schema Schema for Type(List/Set/Map).",
                                            "description": "Schema",
                                            "$ref": "#/$defs/schema"
                                        }
                                    },
                                    "required": ["schema"]
                                }
                            }
                        },
                        "required": ["element"]
                },
                "else": {
                    "not": {
                        "properties": { 
                            "element":{
                                "type":"object",
                                "properties": {
                                    "type":{
                                        "type":"string",
                                        "enum": ["resource", "schema"]
                                    },
                                    "schema":{
                                        "type":"array",
                                        "items": {
                                            "type": "object",
                                            "$ref": "#/$defs/resource"
                                        }
                                    }
                                }
                            }
                        } ,
                        "required": ["element"]
                    }
                },
                "oneOf": [
                    {
                        "type": "object",
                        "properties": {
                            "optional": { 
                                "type": "boolean",
                                "title": "Optional",
                                "description": "Indicates that this element is optional to include in the configuration.",
                                "pattern": "true",
                                "enum":[true]
                            }
                        }
                    },
                    {
                        "type": "object",
                        "properties": {
                            "required": { 
                                "type": "boolean",
                                "title": "Required",
                                "description": "Indicates that this element must be provided in the configuration.",
                                "pattern": "true",
                                "enum":[true]
                            }
                        }
                    }
                ],
                "allOf": [
                    {                   
                        "oneOf": [
                            {
                                "type": "object",
                                "properties": {
                                    "max_items":{
                                        "type": "number",
                                        "title": "Maximum Items",
                                        "description": "MaxItems defines a maximum amount of items that can exist within a TypeSet or TypeList."
                                    }
                                }
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "min_items":{
                                        "type": "number",
                                        "title": "Minimum Items",
                                        "description": "MinItems defines a minimum amount of items that can exist within a TypeSet or TypeList."
                                    }
                                }
                            }
                        ]
                    }
                ]
        }
    }
}
