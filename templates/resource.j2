{% import './helpers/schema.j2' as schemaHelper %}
{% import './helpers/create.j2' as createHelper %}
package {{provider_name | lower}}

import(
    {% for import in imports  %}
    "{{ import }}"
    {% endfor %}
)

func resource{{provider_name | capitalize}}{{name | capitalize}}() *schema.Resource {
	return &schema.Resource{
        CreateContext: resource{{provider_name | capitalize}}{{name | capitalize}}Create,
		UpdateContext: resource{{provider_name | capitalize}}{{name | capitalize}}Update,
		ReadContext:   resource{{provider_name | capitalize}}{{name | capitalize}}Read,
		DeleteContext: resource{{provider_name | capitalize}}{{name | capitalize}}Delete,


        Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		Schema: map[string]*schema.Schema{
			{% for schema in schemas %}
				{{ schemaHelper.getSchemaEle(schema) }}
			{% endfor %}
		},
	}
}


func resourceAciContractCreate(ctx context.Context, d *schema.ResourceData, m interface{}) diag.Diagnostics {
	
	{{provider_name | lower}}Client := m.(*client.Client)
	{{name | lower}} = models.{{name | pascalize}}{
		{% for schema in schemas %}
			{% if schema.required is true %}
				{% if schema.type == "string" %}
					{{schema.attribute | pascalize}}: d.Get("{{schema.attribute}}").({{schema.type}}),
				{% endif %}
			{% endif %}
		{% endfor %}
	}
	
	{% for schema in schemas %}
		{% if schema.optional is true %}
			{% if schema.type == "string" %}
				if {{schema.attribute | pascalize}}, ok := d.GetOk("{{schema.attribute}}"); ok {
					{{name | lower}}.{{schema.attribute | pascalize}} = {{schema.attribute | pascalize}}.({{schema.type}})
				}
			{% endif %}
		{% endif %}
	{% endfor %}
		
	
	{% for schema in schemas %}
		{% if schema.element is defined %}
			{% if schema.element.type == "resource" %}
				{{createHelper.genCreateElement(schema, name)}}
			{% endif %}
		{% endif %}
	{% endfor %}

	err := {{provider_name | lower}}Client.Create{{name | capitalize}}({{name | lower}})
	if err != nil {
		return diag.FromErr(err)
	}
	return resource{{provider_name | capitalize}}{{name | capitalize}}Read(ctx, d, m)
}