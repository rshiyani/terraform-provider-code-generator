{% import './helpers/schema.j2' as schemaHelper %}
package {{provider_name | lower}}

{% set stringSubTypeList = ["base64","cidr","ipv4","ipv6","json","mac","regex","time","url-http","url-https","uuid"]%}

var resource{{name | pascalize}}Test = map[string]interface{}{
	{% for schema in schemas %}
		{% if schema.type not in ["list","set","map"] and schema.test_params is defined%}
			{% if schema.type == "float" %}
				"{{schema.attribute}}" : map[string]interface{}{
					"valid": []float64{ {{schema.test_params.valid | map("tojson") | join(', ')}} },
					"invalid": []interface{}{ {{ schema.test_params.invalid | map("tojson") | join(', ')}} },
				},
			{% elif schema.type == "string" %}
				{% if schema.subtype in stringSubTypeList %}
					"{{schema.attribute}}" : map[string]interface{}{
						"valid": Test[{{schema.subtype | quote}}].(map[string]interface{})["valid"].([]string),
						"invalid": Test[{{schema.subtype | quote}}].(map[string]interface{})["invalid"].([]interface{}),
					},
				{% elif schema.validation is defined %}
					{% if schema.validation.func_name == "StringInSlice" or schema.validation.func_name == "StringNotInSlice" %}
						"{{schema.attribute}}" : map[string]interface{}{
							"valid": []string{ {{ schema.test_params.valid | map("tojson") | join(', ') }} },
							"invalid": []string{ {{schema.test_params.invalid | map("tojson") | join(', ')}} },
						},
					{% elif schema.validation.func_name == "IsCIDRNetwork"%}
						"{{schema.attribute}}" : map[string]interface{}{
							"valid": []int{ {{ schema.test_params.valid | map("tojson") | join(', ')}} },
							"invalid": []int{ {{schema.test_params.invalid | map("tojson") | join(', ')}} },
						},
					{% endif %}
				{% else %}
				"{{schema.attribute}}" : map[string]interface{}{
					"valid": []string{ {{ schema.test_params.valid | map("tojson") | join(', ')}} },
					"invalid": []interface{}{ {{ schema.test_params.invalid | map("tojson") | join(', ')}} },
				},
				{% endif %}
			{% else %}
				"{{schema.attribute}}" : map[string]interface{}{
					"valid": []{{schema.type}}{ {{schema.test_params.valid | map("tojson") | join(', ')}} },
					"invalid": []interface{}{ {{ schema.test_params.invalid | map("tojson") | join(', ')}} },
				},
			{% endif %}
		{% endif %}
	{% endfor %}
	
}

{% set requiredAttrSchemaList = [] %}

{% macro printQuote(schema) %}
	{%- if schema.type == "string" -%}
		{%- if schema.subtype == "json" -%}
		`
		{%- else -%}
		"
		{%- endif -%}
	{%- endif -%}
{% endmacro %}

{% macro printStepsWithoutRequiredArguments() %}
	{% for schema in schemas %}
		{% if schema.required is true and schema.type not in ["list","set","map"]%}
		{
			Config: CreateAcc{{name | pascalize}}Without{{schema.attribute | pascalize}}(),
			ExpectError: regexp.MustCompile(`Missing required argument`),
		},
		{% endif %}
	{% endfor %}
{% endmacro %}

{% macro printStepsForConfig() %}
	{
		Config: CreateAcc{{name | pascalize}}Config(),
		Check: resource.ComposeTestCheckFunc(
			testAccCheck{{provider_name | pascalize}}{{name | pascalize}}Exists(resourceName, &{{name | camelize}}_default),
			{% for schema in schemas %}
				{% if schema.type not in ["list","set","map"] %}
					{% if schema.required is true %}
						{% if schema.type == "float" %}
						resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}", resource{{name | pascalize}}Test["{{schema.attribute}}"].(map[string]interface{})["valid"].([]float64)[0]),
						{% else %}
						resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}", resource{{name | pascalize}}Test["{{schema.attribute}}"].(map[string]interface{})["valid"].([]{{schema.type}})[0]),
						{% endif %}
					{% else %}
						{% if schema.type == "float" %}
							{% if schema.default is defined %}
								resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}", {{schema.default}}),
							{% else %}
								resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}", 0.0),
							{% endif %}
						{% elif schema.type == "int" %}
							{% if schema.default is defined %}
								resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}", {{schema.default}}),
							{% else %}
								resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}", 0),
							{% endif %}
						{% elif schema.type == "string" %}
							{% if schema.default is defined %}
								resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}", "{{schema.default}}"),
							{% else %}
								resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}", ""),
							{% endif %}
						{% elif schema.type == "bool" %}
							{% if schema.default is defined %}
								resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}", {{schema.default}}),
							{% else %}
								resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}", false),
							{% endif %}
						{% else %}
						resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}", resource{{name | pascalize}}Test["{{schema.attribute}}"].(map[string]interface{})["valid"].([]{{schema.type}})[0]),
						{% endif %}
					{% endif %}			
				{% endif %}
			{% endfor %}
		),
	},
{% endmacro %}


{% macro printStepsForConfigWithOptional() %}
	{
		Config: CreateAcc{{name | pascalize}}ConfigWithOptional(),
		Check: resource.ComposeTestCheckFunc(
			testAccCheck{{provider_name | pascalize}}{{name | pascalize}}Exists(resourceName, &{{name | camelize}}_updated),
			{% for schema in schemas %}
				{% if schema.type not in ["list","set","map"] %}
					{% if schema.type == "float" %}
					resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}", resource{{name | pascalize}}Test["{{schema.attribute}}"].(map[string]interface{})["valid"].([]float64)[0]),
					{% else %}
					resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}", resource{{name | pascalize}}Test["{{schema.attribute}}"].(map[string]interface{})["valid"].([]{{schema.type}})[0]),
					{% endif %}
				{% endif %}
			{% endfor %}
		),
	},
{% endmacro %}


func TestAcc{{provider_name | pascalize}}{{name | pascalize}}_Basic(t *testing.T) {
	var {{name | camelize}}_default models.{{name | pascalize}}
	var {{name | camelize}}_updated models.{{name | pascalize}}
	resourceName := "{{provider_name | lower}}_{{name | camelize}}.test"
	
	// [TODO]: Add makeTestVariable() to utils.go file
	rName := makeTestVariable(acctest.RandString(5))
	rOther := makeTestVariable(acctest.RandString(5))
	
	resource.Test(t, resource.TestCase{
		PreCheck:          func() { testAccPreCheck(t) },
		ProviderFactories: testAccProviders,
		CheckDestroy:      testAccCheck{{provider_name | pascalize}}{{name | pascalize}}Destroy,
		Steps: []resource.TestStep{
			{{printStepsWithoutRequiredArguments()-}}
			{{printStepsForConfig()-}}
			{{printStepsForConfigWithOptional()-}}
		},
	})
}

{% macro setRequiredAttrList() %}
	{% for schema in schemas %}
		{% if schema.required is true %}
			{% set requiredAttrSchemaList = requiredAttrSchemaList.append(schema) %}
		{% endif %}
	{% endfor %}
{% endmacro %}

{% macro printFunctionWithoutRequiredArguments() %}
	{% for schema in schemas %}
		{% if schema.required is true and schema.type not in ["list","set","map"]%}
func CreateAcc{{name | pascalize}}Without{{schema.attribute | pascalize}}() string {
	return fmt.Sprintf(`
		resource "{{provider_name | camelize}}_{{name | camelize}}" "test" {
			{% set reqArgs = [] %}
			{% for sch in schemas %}
				{% if sch.required is true %}
					{% if sch.attribute != schema.attribute and sch.type not in ["list","set","map"] %}
					{{sch.attribute}} = "%v"
						{% if sch.type == "float" %}
							{{- reqArgs.append('resource'+name | pascalize+'Test["'+sch.attribute+'"].(map[string]interface{})["valid"].([]float64)[0]') or "" -}}
						{% else %}
							{{- reqArgs.append('resource'+name | pascalize+'Test["'+sch.attribute+'"].(map[string]interface{})["valid"].([]'+sch.type+')[0]') or "" -}}
						{% endif %}
					{% endif %}
				{% endif %}
			{% endfor %}
		}
	`,{{reqArgs | join(',\n')}})
}
		{% endif %}
	{% endfor %}
{% endmacro %}

{% macro printFunctionForConfig() %}
func CreateAcc{{name | pascalize}}Config() string {
	return fmt.Sprintf(`
		resource  "{{provider_name | camelize}}_{{name | camelize}}" "test" {
			{% set reqArgs = [] %}
			{% for schema in schemas %}
				{% if schema.required is true and schema.type not in ["list","set","map"] %}
					{{schema.attribute}} = "%v"
					{% if schema.type == "float" %}
							{{- reqArgs.append('resource'+name | pascalize+'Test["'+schema.attribute+'"].(map[string]interface{})["valid"].([]float64)[0]') or "" -}}
						{% else %}
							{{- reqArgs.append('resource'+name | pascalize+'Test["'+schema.attribute+'"].(map[string]interface{})["valid"].([]'+schema.type+')[0]') or "" -}}
						{% endif %}
				{% endif %}
			{% endfor %}
		}
	`,{{reqArgs | join(',\n')}})
}
{% endmacro %}

{% macro printFunctionForConfigWithOptional() %}
func CreateAcc{{name | pascalize}}ConfigWithOptional() string {
	return fmt.Sprintf(`
		resource  "{{provider_name | camelize}}_{{name | camelize}}" "test" {
			{% set args = [] %}
			{% for schema in schemas %}
				{% if schema.type not in ["list","set","map"] %}
					{{schema.attribute}} = "%v"
					{% if schema.type == "float" %}
							{{- args.append('resource'+name | pascalize+'Test["'+schema.attribute+'"].(map[string]interface{})["valid"].([]float64)[0]') or "" -}}
						{% else %}
							{{- args.append('resource'+name | pascalize+'Test["'+schema.attribute+'"].(map[string]interface{})["valid"].([]'+schema.type+')[0]') or "" -}}
						{% endif %}
				{% endif %}
			{% endfor %}
		}
	`,{{args | join(',\n')}})
}
{% endmacro %}
{{setRequiredAttrList()}}
{{printFunctionWithoutRequiredArguments()}}
{{printFunctionForConfig()}}
{{printFunctionForConfigWithOptional()}}
