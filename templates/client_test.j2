{% from "client.j2" import getFuncName %}

{#}{#}{#}{#}
{#} converts an array of items to quoted comma {#}
{#} separated list 							   {#}
{#} [i1, i2] -> "i1", "i2" 		    		   {#}
{#}{#}
{%- macro listToQuotedCommaSepList(l) %}
"{{ l | join("\", \"") }}"
{%- endmacro %}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package client

import (
{% for module in include %}
    "{{ module }}"
{% endfor %}
    "github.com/joho/godotenv"
)

var (
    USERNAME = ""
    PASSWORD = ""
    URL = ""
)

var id interface{}

func setup() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}

	USERNAME = os.Getenv("USERNM")
	PASSWORD = os.Getenv("PASSWORD")
	URL = os.Getenv("URL")
}

func TestMain(m *testing.M) {
	setup()
	code := m.Run()
	os.Exit(code)
}

func TestLogin(t *testing.T) {
	_, err := client.GetClient(USERNAME, PASSWORD, URL)
	if err != nil {
		t.Error(err)
	}
}


{% for e in endpoints %}
{%      set methods = ["GET", "POST", "PUT", "DELETE"] %}
{%      for m in methods %}
{%          if e[m] is defined %}
{%          set funcName = getFuncName(e, m) %}
func Test{{funcName}}(t *testing.T) {
    c, err := client.GetClient(USERNAME, PASSWORD, URL)
    if err != nil {
        t.Error(err)
    }

{%	set is_post_with_unique = true if m == "POST" and e[m].unique is defined else false %}
    {{ "cont," if is_post_with_unique else "_," if m != "DELETE" }} err {{":=" if is_post_with_unique else "="}} c.{{ funcName }}(
{%-         set args = [] %}
{%          for dict in e[m].args %}
{%              if dict.pointer %}
{{                  args.append("&" ~ dict.value) or "" -}}
{%              elif dict.fromPostResponse is defined %}
{{                  args.append("id.(" ~ dict.type ~")") or "" -}}
{%              elif dict.type == "string" and dict.value is defined %}
{{                  args.append("\"" ~ dict.value ~ "\"") or "" -}}
{%              else %}
{{                  args.append(dict.value) }}
{%              endif %}
{%          endfor %}
    {{- args | join(", ") }})
    
{%          if m == "POST" and e[m].unique is defined %}
    contInt := cont.Data()
	contMap := contInt.(map[string]interface{})
	id = contMap["{{e[m].unique}}"]
{%          endif %}
    
    if err != nil {
        t.Error(err)
    }
}
{%          endif %}
{%      endfor %}
{% endfor %}


// ================ DATA =================== //

{% for d in data %}
var {{      d.name }} = {{ d.type }}{
{%      for key, val in d.attributes.items() %}
{%          if val.type == "string" %}
    {{ key }}: "{{ val.value }}",
{%          elif val.type == "list" %}
    {{ key }}: []{{val.subtype}}{ {{ listToQuotedCommaSepList(val["values"]) if val.subtype == "string" else val["values"] | join(", ") }} },
{%          else %}
    {{ key }}: {{"&" if val.reference }}{{ val.value}},
{%          endif %}
{%-     endfor %}
}
{% endfor %}