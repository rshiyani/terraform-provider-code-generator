{% import './helpers/schema.j2' as schemaHelper %}
{% set PrimitiveTypeList = ["string","bool","int"]%}


{% macro genCreateElement(schema, parentName) %}
if {{schema.attribute | capitalize}}s, ok := d.GetOk("{{schema.attribute | lower}}"); ok {
    {{schema.attribute | lower}}s := {{schema.attribute | capitalize}}s.([]interface{})
    {{genCreateElementBody(schema, parentName)}}
{% endmacro %}

{% macro genCreateElementInternal(schema, recivedMapName, parentName) %}
if {{recivedMapName}}["{{schema.attribute}}"] != nil {
    {{schema.attribute | lower}}s := {{recivedMapName}}["{{schema.attribute}}"].([]interface{})
    {{genCreateElementBody(schema, parentName)}}
{% endmacro %}

{% macro genCreateElementBody(schema, parentName) %}
    {# pending 1#}
    
    {% set attrName = schema.attribute %}
    for _, val := range {{schema.attribute | lower}}s {
        {% set modelName = schema.attribute  %}
        {% set map = (schema.attribute | camelize)+"Map" %}
        {% set currentResourceName = schema.attribute | lower %}
        {{modelName}} := models.{{schema.attribute | pascalize}}{
            {% for schema in schema.element.schema %}
                {% if schema.required is true %}
                    {% if schema.type in PrimitiveTypeList %}
                        {{schema.attribute | pascalize}} : d.Get({{map}}["{{schema.attribute | lower}}"]).({{schema.type}}),
                    {% elif schema.type == "float" %}
                        {{schema.attribute | pascalize}} : d.Get({{map}}["{{schema.attribute | lower}}"]).(float64),
                    {% elif schema.type == "map" %}
                        {{schema.attribute | pascalize}} : d.Get({{map}}["{{schema.attribute | lower}}"]).(map[string]interface{}),
                    {% elif schema.type == "set" %}
                        {% if schema.element is defined %}
                            {% if schema.element.type == "schema" %}
                                {% if schema.element.schema.type in PrimitiveTypeList %}
                                    {{schema.attribute | pascalize}}: d.Get("{{schema.attribute}}").({{schema.element.schema.type}}),
                                {% elif schema.element.schema.type == "float" %}
                                    {{schema.attribute | pascalize}}: d.Get("{{schema.attribute}}").(float64),
                                {% endif %}
                            {% else %}
                                {{schema.attribute | pascalize}}: d.Get("{{schema.attribute}}").([]models.{{schema.attribute | pascalize}}),
                            {% endif %}
                        {% endif %}
                    {% elif schema.type == "list" %}
                        {% if schema.element is defined %}
                            {% if schema.element.type == "schema" %}
                                {% if schema.element.schema.type in PrimitiveTypeList %}
                                    {{schema.attribute | pascalize}}: d.Get("{{schema.attribute}}").({{schema.element.schema.type}}),
                                {% elif schema.element.schema.type == "float" %}
                                    {{schema.attribute | pascalize}}: d.Get("{{schema.attribute}}").(float64),
                                {% endif %}
                            {% else %}
                                {{schema.attribute | pascalize}}: d.Get("{{schema.attribute}}").([]models.{{schema.attribute | pascalize}}),
                            {% endif %}
                        {% endif %}
                    {% endif %}
                {% endif %}
            {% endfor %}
        }
        {{map}} := val.(map[string]interface{})
        {% for schema in schema.element.schema %}
            {% if schema.optional is true %}
                {% if schema.type in PrimitiveTypeList %}
                    if {{map}}["{{schema.attribute | lower}}"] != nil {
                        {{ modelName }}.{{schema.attribute | pascalize}} = {{map}}["{{schema.attribute | lower}}"].({{schema.type}})                    
                    }
                {% elif schema.type == "float" %}
                    if {{map}}["{{schema.attribute | lower}}"] != nil {
                        {{ modelName }}.{{schema.attribute | pascalize}} = {{map}}["{{schema.attribute | lower}}"].(float64)                    
                    }
                {% elif schema.type == "map" %}
                    {% if schema.element.type == "resource" %}
                    {{genCreateElementInternal(schema, map, currentResourceName)}}
                    {% elif schema.element.type == "schema" %}
                    if {{map}}["{{schema.attribute | lower}}"] != nil {
                        {{ modelName }}.{{schema.attribute | pascalize}} = {{map}}["{{schema.attribute | lower}}"].(map[string]interface{})                    
                    }
                    {% endif %}

                {% elif schema.type == "set" %}
                    {% if schema.element.type == "resource" %}
                    {{genCreateElementInternal(schema, map, currentResourceName)}}
                    {% elif schema.element.type == "schema" %}
                    if {{map}}["{{schema.attribute | lower}}"] != nil {
                        {{ modelName }}.{{schema.attribute | pascalize}} = {{map}}["{{schema.attribute | lower}}"].(*schema.Set).List()                
                    }
                    {% endif %}
                {% elif schema.type == "list" %}
                    {% if schema.element.type == "resource" %}
                    {{genCreateElementInternal(schema, map, currentResourceName)}}
                    {% elif schema.element.type == "schema" %}
                    if {{map}}["{{schema.attribute | lower}}"] != nil {
                        {{ modelName }}.{{schema.attribute | pascalize}} = {{map}}["{{schema.attribute | lower}}"].([]interface{})               
                    }
                    {% endif %}
                {% endif %}
            {% endif %}
        {% endfor %}

        {{parentName | lower}}.{{schema.attribute| pascalize}}s = append({{parentName}}.{{schema.attribute| pascalize}}s, {{modelName}})
    }
}
{% endmacro %}