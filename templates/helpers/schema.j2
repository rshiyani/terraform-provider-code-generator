{% set validFuncList=[
    "IsCIDR",
    "IsIPAddress",
    "IsIPv4Address",
    "IsIPv4Range",
    "IsIPv6Address",
    "IsMACAddress",
    "IsPortNumber",
    "IsPortNumberOrZero",
    "IsRFC3339Time",
    "IsURLWithHTTPS",
    "IsURLWithHTTPorHTTPS",
    "IsUUID",
    "ListOfUniqueStrings",
    "NoZeroValues",
    "StringIsBase64",
    "StringIsEmpty",
    "StringIsJSON",
    "StringIsNotEmpty",
    "StringIsNotWhiteSpace",
    "StringIsValidRegExp",
    "StringIsWhiteSpace"] %}

{% macro genFuncName(name) %}
    {% set nameList = name.split('_') | map('capitalize') | join("") %}
    {{- nameList -}}
{% endmacro %}

{% macro checkRequired(required) %}
    {% if required is true %}
        Required: true,
    {% endif %}
{% endmacro %}

{% macro checkOptional(optional) %}
    {% if optional is true %}
        Optional: true,
    {% endif %}
{% endmacro %}

{% macro checkForceNew(forcenew) %}
    {% if forcenew is true  %}
        ForceNew: true,
    {% endif %}
{% endmacro %}

{% macro checkDefault(default) %}
    {% if default is true  %}
        Default: true,
    {% endif %}
{% endmacro %}

{% macro checkComputed(computed) %}
    {% if computed is true  %}
        Computed: true,
    {% endif %}
{% endmacro %}

{% macro checkDescription(desc) %}
    {% if desc is defined %}
        Description: "{{desc}}",
    {% endif %}
{% endmacro %}

{% macro checkDefaultFunc(flag, env) %}
    {% if flag is true %}
        {% if env is defined %}
            DefaultFunc: schema.EnvDefaultFunc("{{env}}", nil),
        {% else %}
            DefaultFunc: func() (interface{}, error) {
                // [TODO]: Write your code here
                return nil, nil
            },
        {% endif %}
    {% endif %}
{% endmacro %}

{% macro checkValidation(valid) %}
    {% if valid is defined %}
        {% if valid.func_name == 'StringInSlice' or valid.func_name == 'StringNotInSlice' %}
            ValidateDiagFunc: validation.ToDiagFunc(validation.{{valid.func_name}}([]string{
                {% for func in valid.params %}
                    "{{func}}",
                {% endfor %}
            }, {{valid.ignore_case is true | lower}}),
            ),
        {% elif valid.func_name == 'IsCIDRNetwork' %}
            ValidateDiagFunc: validation.ToDiagFunc(
                validation.{{valid.func_name}}({{valid.params[0]}}, {{valid.params[1]}}),
            ),
        {% elif valid.func_name in validFuncList %}
            ValidateDiagFunc: validation.ToDiagFunc(validation.{{valid.func_name}}),
        {% else %}
        // [ERROR]: {{valid.func_name}} may be a Typo or not in AutoGen List. Please refer docs once.
        {% endif %}
    {% endif %}
{% endmacro %}

{% macro checkMaxItems(num) %}
    {% if num is defined %}
        MaxItems: {{num}},
    {% endif %}
{% endmacro %}

{% macro checkMinItems(num) %}
    {% if num is defined %}
        MinItems: {{num}},
    {% endif %}
{% endmacro %}

{% macro checkSensitive(isSensitive) %}
    {% if isSensitive is true %}
        Sensitive: true,
    {% endif %}
{% endmacro %}

{% macro checkDiffSuppress(flag) %}
    {% if flag %}
        DiffSuppressFunc: func(k, oldValue, newValue string, d *schema.ResourceData) bool {
                // [TODO]: Write your code here
                return false 
            },
    {% endif %}
{% endmacro %}

{% macro getSchemaEle(schema) %}
    "{{ schema.attribute }}": &schema.Schema{
        {{checkType(schema)}}
    },
{% endmacro %}

{% macro checkType(schema) %}
    {% if schema.type is defined %}
        Type: schema.Type{{schema.type | capitalize}},
        {{checkSensitive(schema.sensitive)-}}
        {{checkRequired(schema.required)-}}
        {{checkComputed(schema.computed)-}}
        {{checkOptional(schema.optional)-}}
        {{checkForceNew(schema.forcenew)-}}
        {{checkDefault(schema.default)-}}
        {{checkDefaultFunc(schema.default_func, schema.envvar)-}}
        {{checkDescription(schema.description)-}}
        {{checkValidation(schema.validation)-}}
        {{checkDiffSuppress(schema.diff_suppress)-}}
        {% if schema.type == "list" or schema.type == "set" %}
            {{checkMaxItems(schema.max_items)-}}
            {{checkMinItems(schema.min_items)-}}
            {% if schema.element.type == "schema" %}
                Elem: &schema.Schema{
                    {{checkType(schema.element.schema)}}
                },
            {% elif schema.element.type == "resource" %}
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                    {% for schema in schema.element.schema %}
                        {{ getSchemaEle(schema) }}
                    {% endfor %}
                    },
                },
            {% endif %}
        {% elif schema.type == "map" %}
            Elem: &schema.Schema{
                {{checkType(schema.element.schema)}}
            },
        {% endif %}
    {% endif %}
{% endmacro %}

{% macro getDataSchemaEle(schema) %}
    "{{ schema.attribute }}": &schema.Schema{
        {{checkTypeD(schema)}}
    },
{% endmacro %}

{% macro checkTypeD(schema) %}
        {% if schema.type is defined %}
        Type: schema.Type{{schema.type | capitalize}},
        {{checkRequired(schema.required)-}}
        {{checkComputed(schema.computed)-}} 
        {{checkDescription(schema.description)-}}
        {% if schema.type == "list" or schema.type == "set" %}
            {% if schema.element.type == "schema" %}
                Elem: &schema.Schema{
                    {{checkType(schema.element.schema)}}
                },
            {% elif schema.element.type == "resource" %}
                Elem: &schema.Resource{
                    Schema: map[string]*schema.Schema{
                    {% for schema in schema.element.schema %}
                        {{ getDataSchemaEle(schema) }}
                    {% endfor %}
                    },
                },
            {% endif %}
        {% elif schema.type == "TypeMap" %}
            Elem: &schema.Schema{
                {{checkType(schema.element.schema)}}
            },
        {% endif %}
    {% endif %}
{% endmacro %}

{% macro getRequired(schema) %}
    {% if schema.required is true %}
        {{schema.attribute}}:= d.Get("{{schema.attribute | camelize}}")
    {% endif %}
{% endmacro %}

{% macro getRequiredModel(schema) %}
    {% if schema.required is true %}
        {{schema.attribute| pascalize}}:  d.Get("{{schema.attribute | camelize}}"),
    {% endif %}
{% endmacro %}

{% macro getTestAttr(schema) %}
    {% if schema.type not in ["map","list","set"] %}
        resource.TestCheckResourceAttrPair(dataSourceName, "{{schema.attribute}}", resourceName, "{{schema.attribute}}"),
    {% elif schema.type in ["list","set"] %}
        resource.TestCheckResourceAttrPair(dataSourceName, "{{schema.attribute}}.#", resourceName, "{{schema.attribute}}.#"),
    {% endif %}
{% endmacro %}

{% macro getRequiredDNFunc(name,schema) %}
    {% if schema.required is true and schema.type not in ["map","list","set"] %}
    {
        Config:      CreateAcc{{name}}DSWithoutRequired{{schema.attribute | pascalize}}("{{schema.attribute}}"),
        ExpectError: regexp.MustCompile(`Missing required argument`),
    },
    {% endif %}
{% endmacro %}

{% macro getRequiredDNFuncWithoutVar(provider_name,name,schemas) %}
{% for schema in schemas %}
func CreateAcc{{name | pascalize}}DSWithoutRequired{{schema.attribute | pascalize}}(rName string) string {
    fmt.Println("=== STEP  Basic: Testing {{name | pascalize}} data source creation without required {{schema.attribute | pascalize}}")
	
    resource := CreateAcc{{name | pascalize}}Config(rName)
    resource += fmt.Sprintf(`
	data "{{provider_name | camelize}}_{{name | camelize}}" "test" {
        {% set reqArgs = [] %}
        {% for sch in schemas %}   
            {%- if sch.attribute != schema.attribute and sch.required is true %}
        {{sch.attribute}} = "%v"
                {% if sch.type == "float" %}
                    {{- reqArgs.append('resource'+name | pascalize+'Test["'+sch.attribute+'"].(map[string]interface{})["valid"].([]float64)[0]') or "" -}}
                {% else %}
                    {{- reqArgs.append('resource'+name | pascalize+'Test["'+sch.attribute+'"].(map[string]interface{})["valid"].([]'+sch.type+')[0]') or "" -}}
                {% endif %}
            {% endif %}
        {% endfor %}
	}
	`,{{reqArgs | join(',\n')}})
	return resource
}
{% endfor %}
{% endmacro %}

                        