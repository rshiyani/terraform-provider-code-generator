{#
██████╗░███████╗░██████╗░█████╗░██╗░░░██╗██████╗░░█████╗░███████╗
██╔══██╗██╔════╝██╔════╝██╔══██╗██║░░░██║██╔══██╗██╔══██╗██╔════╝
██████╔╝█████╗░░╚█████╗░██║░░██║██║░░░██║██████╔╝██║░░╚═╝█████╗░░
██╔══██╗██╔══╝░░░╚═══██╗██║░░██║██║░░░██║██╔══██╗██║░░██╗██╔══╝░░
██║░░██║███████╗██████╔╝╚█████╔╝╚██████╔╝██║░░██║╚█████╔╝███████╗
╚═╝░░╚═╝╚══════╝╚═════╝░░╚════╝░░╚═════╝░╚═╝░░╚═╝░╚════╝░╚══════╝
#}

{# ---------------------------------------Macros used to check type------------------------------------------------ #}

{% macro getValueType(schema) %}
	{%- if schema.type in ["int","float"] -%}
	%v
	{%- elif schema.type in ["string","bool"] -%}
	"%v"
	{%- endif -%}  
{% endmacro %}


{# ---------------------------------------Macros used to create Map------------------------------------------------ #}
{% set stringSubTypeList = ["base64","cidr","ipv4","ipv6","json","mac","regex","time","url-http","url-https","uuid"]%}

{% macro getMapValuesForAttr(schema) %}
{% if schema.validation is defined and schema.type == "string" and schema.subtype in stringSubTypeList %}
"{{schema.attribute}}" : map[string]interface{}{
	"valid": searchInObject(Test, {{[schema.attribute] | make_dot_string("valid") | quote}}),
	"invalid": searchInObject(Test, {{[schema.attribute] | make_dot_string("invalid") | quote}}),
	"multiple_valids": searchInObject(Test, {{[schema.attribute] | make_dot_string("multiple_valids") | quote}}),
},
{% else %}
"{{schema.attribute}}" : map[string]interface{}{
	"valid": []interface{}{ {{schema.test_params.valid | map("tojson") | join(', ')}} },
	"invalid": []interface{}{ {{ schema.test_params.invalid | map("tojson") | join(', ')}} },
	"multiple_valids": []interface{}{ {{ schema.test_params.multiple_valids | map("tojson") | join(', ')}} },
},
{% endif %}
{% endmacro %}

{% macro getMapValuesForAttrDependsOn(schema) %}
"{{schema.attribute}}" : map[string]interface{}{
	"valid": searchInObject(resource{{schema.depends_on.resource_name | pascalize}}Test, {{schema.depends_on.attribute_name | make_dot_string("valid") | quote}}),
	"invalid": searchInObject(resource{{schema.depends_on.resource_name | pascalize}}Test, {{schema.depends_on.attribute_name | make_dot_string("invalid") | quote}}),
	"multiple_valids": searchInObject(resource{{schema.depends_on.resource_name | pascalize}}Test, {{schema.depends_on.attribute_name | make_dot_string("multiple_valids") | quote}}),
},
{% endmacro %}

{% macro getMapForResource(schema) %}
"{{schema.attribute}}" : map[string]interface{}{
	{% for sch in schema.element.schema %}
		{% if sch.depends_on is not defined and sch.type in ["float", "int", "string","bool", "map"] %}
			{{getMapValuesForAttr(sch)}}
		{% elif sch.depends_on is not defined and sch.type in ["list", "set"] %}
			{% if sch.element.type == "resource" %}
				{{getMapForResource(sch)}}
			{% elif sch.element.type == "schema" %}
				{{getMapValuesForAttr(sch)}}
			{% endif %}
		{% elif sch.depends_on is defined and schema.depends_on.attribute_name | last != "id" %}
			{{getMapValuesForAttrDependsOn(sch)}}
		{% endif %}
	{% endfor %}
},
{% endmacro %}


{# --------------------------------Functions for : CheckExists, CheckDestroy, IDEqual and IDNotEqual-------------------------------------------- #}

{% macro printFunctionTestAccResourceExists(name,provider_name) %}
func testAccCheck{{provider_name | pascalize}}{{name | pascalize}}Exists(name string, {{name | camelize}} *models.{{name | pascalize}}) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		// [TODO]: Write your code here
	}
}
{% endmacro %}

{% macro printFunctionTestAccResourceDestroy(name,provider_name) %}
func testAccCheck{{provider_name | pascalize}}{{name | pascalize}}Destroy(s *terraform.State) error {
	client := testAccProvider.Meta().(*client.Client)

	for _, rs := range s.RootModule().Resources {

		if rs.Type == "{{provider_name | camelize}}_{{name | snakify}}" {
			// [TODO]: Write your code here
		}
	}
	return nil
}
{% endmacro %}

{% macro printFunctionForIdEqual(name,provider_name)%}
func testAccCheck{{provider_name | pascalize}}{{name | pascalize}}IdEqual({{name | camelize}}1, {{name | camelize}}2 *models.{{name | pascalize}}) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		Id1, err := getIdFrom{{name | pascalize}}Model({{name | camelize}}1)
		if err != nil {
			return err
		}
		Id2, err := getIdFrom{{name | pascalize}}Model({{name | camelize}}2)
		if err != nil {
			return err
		}
		if Id1 != Id2 {
			return fmt.Errorf("{{name | pascalize}} IDs are not equal")
		}
		return nil
	}
}
{% endmacro %}
{% macro printFunctionForIdNotEqual(name,provider_name)%}
func testAccCheck{{provider_name | pascalize}}{{name | pascalize}}IdNotEqual({{name | camelize}}1, {{name | camelize}}2 *models.{{name | pascalize}}) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		Id1, err := getIdFrom{{name | pascalize}}Model({{name | camelize}}1)
		if err != nil {
			return err
		}
		Id2, err := getIdFrom{{name | pascalize}}Model({{name | camelize}}2)
		if err != nil {
			return err
		}
		if Id1 == Id2 {
			return fmt.Errorf("{{name | pascalize}} IDs are equal")
		}
		return nil
	}
}
{% endmacro %}


{# -----------------------------------------Get Parent Block With Self Block------------------------------------------------ #}

{# ***** Macro : This will contains internal list set attributes for resource block with valid default values ***** #}
{% macro getInternalAttributes(name, provider_name, schema, args, parentAttr,indent) %}
    {{-indent.append(0) or ""-}}
    {{-indent.append(0) or ""-}}
    {% for sch in schema %}
            {% if sch.type not in ["list","set","map"] %}
                {% if sch.depends_on is defined %}
                    
                        {{'  '*(indent | length)}}{{sch.attribute}} = {{provider_name | camelize}}_{{sch.depends_on.resource_name | snakify}}.test.{{sch.depends_on.attribute_name | make_dot_string}}
                {% else %}
                        
                        {{'  '*(indent | length)}}{{sch.attribute}} = {{getValueType(sch)}}
                        {{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(parentAttr,sch.attribute, "valid", "0") | quote+')') or ""}}
                {% endif %}
            {% elif sch.type in ["list", "set"] %}
                {% if sch.element.type == "schema" %}
                    {% if sch.element.schema.type not in ["list","set", "map"] %}
                        
                        {{'  '*(indent | length)}}{{sch.attribute}} = [{{getValueType(sch.element.schema)}},{{getValueType(sch.element.schema)}}]
                    {{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(parentAttr, sch.attribute, "valid", "0") | quote+')') or ""}}
					{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(parentAttr, sch.attribute, "valid", "1") | quote+')') or ""}}
                    {% endif %}
                {% else %}

                        {{'  '*(indent | length)}}{{sch.attribute}} {
                            {{getInternalAttributes(name, provider_name, sch.element.schema, args, parentAttr+'.'+sch.attribute,indent) }}
                        {{'  '*(indent | length-1)}}}
                {% endif %}
            {% endif %}
        {% endfor %}
{% endmacro %}

{# +++++ Function will contains parent resource block with it's self resource block +++++ #}
{% macro printGetParent(name,provider_name,schemas) %}
	func getParent{{name | pascalize}}(rName string)  []string{
		t := []string{}
		{% for schema in schemas %}
			{% if schema.depends_on is defined %}
				t = append(t, getParent{{schema.depends_on.resource_name | pascalize}}(rName)...)
			{% endif %}
		{% endfor %}
		t = append(t, {{name | camelize}}Block(rName))
		return t
	}
{% endmacro %}

{# +++++ Function will contains self resource block only +++++ #}
{% macro printBlock(name,provider_name,schemas,unique_attribute) %}
	func {{name | camelize}}Block(rName string) string{
		return fmt.Sprintf(`
		resource  "{{provider_name | camelize}}_{{name | snakify}}" "test" {
			{% set args = [] %}
			{% for schema in schemas %}
				{% if schema.type not in ["list","set","map"] %}
					{% if schema.depends_on is defined %}

						{{schema.attribute}} = {{provider_name | camelize}}_{{schema.depends_on.resource_name | snakify}}.test.{{schema.depends_on.attribute_name | make_dot_string}}
					{% else %}

						{{schema.attribute}} = {{getValueType(schema)}}
						{% if schema.attribute in unique_attribute %}
						{{- args.append('rName') or ""}}
						{% else %}
						{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schema.attribute, "valid", "0") | quote+')') or ""}}
						{% endif %}
						{% endif %}
				{% elif schema.type in ["list", "set"] %}
                    {% if schema.element.type == "schema" %}
                        {% if schema.element.schema.type not in ["list","set", "map"] %}

				        {{schema.attribute}} = [{{getValueType(schema.element.schema)}},{{getValueType(schema.element.schema)}}]
                            {{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schema.attribute, "valid", "0") | quote+')') or ""}}
                            {{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schema.attribute, "valid", "1") | quote+')') or ""}}
                        {% endif %}
                    {% else %}

                        {{schema.attribute}} {
						{% set indent = []%}    
                        {{getInternalAttributes(name,provider_name,schema.element.schema,args,schema.attribute,indent)}}
                        }
                    {% endif %}
				{% endif %}
			{% endfor %}
		}
	`,{{args | join(',\n')}})
	}
{% endmacro %}


{# -------------------------------------------Steps to Check Create Without Required Arguments---------------------------------------------- #}

{% macro printStepsWithoutRequiredArguments(name, schemas) %}
	{% for schema in schemas %}
		{% if schema.required is true %}
		{
			Config: CreateAcc{{name | pascalize}}Without{{schema.attribute | pascalize}}(rName),
			ExpectError: regexp.MustCompile(`Missing required argument`),
		},
		{% endif %}
	{% endfor %}
{% endmacro %}

{# ------------------------------------------Function for Without Required Arguments---------------------------------------------- #}
{% macro printFunctionWithoutRequiredArguments(name, provider_name, schemas) %}
	{% for schema in schemas %}
		{% if schema.required is true and schema.type != "map"%}
		func CreateAcc{{name | pascalize}}Without{{schema.attribute | pascalize}}(rName string) string {
			var resource string
			parentResources := getParent{{name | pascalize}}(rName)
			parentResources = parentResources[:len(parentResources)-1]
			resource += create{{name | pascalize}}Config(parentResources)
			resource += fmt.Sprintf(`
				resource  "{{provider_name | camelize}}_{{name | snakify}}" "test" {
					{% set args = [] %}
					{% for schInner in schemas %}
						{% if schInner.attribute != schema.attribute %}
							{% if schInner.type not in ["list","set","map"] %}
								{% if schInner.depends_on is defined %}

									{{schInner.attribute}} = {{provider_name | camelize}}_{{schInner.depends_on.resource_name | snakify}}.test.{{schInner.depends_on.attribute_name | make_dot_string}}
								{% else %}

									{{schInner.attribute}} = {{getValueType(schInner)}}
									{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schInner.attribute, "valid", "0") | quote+')') or ""}}
								{% endif %}
							{% elif schInner.type in ["list", "set"] %}
								{% if schInner.element.type == "schema" %}
									{% if schInner.element.schema.type not in ["list","set", "map"] %}

									{{schInner.attribute}} = [{{getValueType(schInner.element.schema)}},{{getValueType(schInner.element.schema)}}]
										{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schInner.attribute, "valid", "0") | quote+')') or ""}}
										{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schInner.attribute, "valid", "1") | quote+')') or ""}}
									{% endif %}
								{% else %}

									{{schInner.attribute}} {
									{% set indent = [0,1,2,3,4,5]%}    
									{{getInternalAttributes(name,provider_name,schInner.element.schema,args,schInner.attribute,indent)}}
									}
								{% endif %}
							{% endif %}
						{% endif %}
					{% endfor %}
				}
			`,{{args | join(',\n')}})
			return resource
		}
		{% endif %}
	{% endfor %}
{% endmacro %}


{# -------------------------------------------Steps to Check Create Config Without Optional---------------------------------------------- #}

{# ***** Macro : This will generate internal steps for list,set having schema 'Elem' as resource having default value ***** #}
{% macro getTestCheckResourceAttrInternal(name, schemas, parentAttr) %}
	{% for schema in schemas %}
		{% if schema.required is true %}
			{% if schema.type not in ["list","set","map"] %}
				resource.TestCheckResourceAttr(resourceName, "{{parentAttr+ '.0.' +schema.attribute}}", fmt.Sprintf("%v", searchInObject(resource{{name | pascalize}}Test, {{[] | make_dot_string(parentAttr | eliminate_zeroes,schema.attribute,"valid", "0") | quote}}))),
			{% elif schema.type in ["list", "set"] %}
				{% if schema.element.type == "resource" %}
					resource.TestCheckResourceAttr(resourceName, "{{parentAttr+ '.0.' + schema.attribute}}.#", "1"),
					{{getTestCheckResourceAttrInternal(name, schema.element.schema, parentAttr + '.0.' + schema.attribute)}}
				{% elif schema.element.type == "schema" %}
					resource.TestCheckResourceAttr(resourceName, "{{parentAttr+ '.0.' + schema.attribute}}.#", "2"),
					resource.TestCheckResourceAttr(resourceName, "{{parentAttr+ '.0.' + schema.attribute}}.0", fmt.Sprintf("%v", searchInObject(resource{{name | pascalize}}Test, {{[] | make_dot_string(parentAttr | eliminate_zeroes,schema.attribute,"valid", "0") | quote}}))),
					resource.TestCheckResourceAttr(resourceName, "{{parentAttr+ '.0.' + schema.attribute}}.1", fmt.Sprintf("%v", searchInObject(resource{{name | pascalize}}Test, {{[] | make_dot_string(parentAttr | eliminate_zeroes,schema.attribute,"valid", "1") | quote}}))),
				{% endif %}
			{% endif %}
		{% else %}
			{% if schema.type == "float" %}
				{% if schema.default is defined %}
					resource.TestCheckResourceAttr(resourceName, "{{parentAttr+ '.0.' +schema.attribute}}", "{{schema.default}}"),
				{% else %}
					resource.TestCheckResourceAttr(resourceName, "{{parentAttr+ '.0.' +schema.attribute}}", "0.0"),
				{% endif %}
			{% elif schema.type == "int" %}
				{% if schema.default is defined %}
					resource.TestCheckResourceAttr(resourceName, "{{parentAttr+ '.0.' +schema.attribute}}", "{{schema.default}}"),
				{% else %}
					resource.TestCheckResourceAttr(resourceName, "{{parentAttr+ '.0.' +schema.attribute}}", "0"),
				{% endif %}
			{% elif schema.type == "string" %}
				{% if schema.default is defined %}
					resource.TestCheckResourceAttr(resourceName, "{{parentAttr+ '.0.' +schema.attribute}}", "{{schema.default}}"),
				{% else %}
					resource.TestCheckResourceAttr(resourceName, "{{parentAttr+ '.0.' +schema.attribute}}", ""),
				{% endif %}
			{% elif schema.type == "bool" %}
				{% if schema.default is defined %}
					resource.TestCheckResourceAttr(resourceName, "{{parentAttr+ '.0.' +schema.attribute}}", "{{schema.default}}"),
				{% else %}
					resource.TestCheckResourceAttr(resourceName, "{{parentAttr+ '.0.' +schema.attribute}}", "false"),
				{% endif %}
			{% elif schema.type in ["list","set"]%}
				{% if schema.element.type == "schema" and schema.element.schema.default is defined %}
					resource.TestCheckResourceAttr(resourceName,"{{parentAttr+ '.0.' +schema.attribute}}.#", "{{schema.element.schema.default | length}}"),
					{% for i in range(schema.element.schema.default | length) %}
					resource.TestCheckResourceAttr(resourceName,"{{parentAttr+ '.0.' +schema.attribute}}.{{i}}", "{{schema.element.schema.default[i]}}"),
					{% endfor %}
				{% else %}
					resource.TestCheckResourceAttr(resourceName,"{{parentAttr+ '.0.' +schema.attribute}}.#", "0"),
				{% endif %}
			{% endif %}
		{% endif %}
	{% endfor %}
{% endmacro %}

{% macro printStepsForConfig(name,provider_name,schemas,unique_attribute) %}
	{
		Config: CreateAcc{{name | pascalize}}Config(rName),
		Check: resource.ComposeTestCheckFunc(
			testAccCheck{{provider_name | pascalize}}{{name | pascalize}}Exists(resourceName, &{{name | camelize}}_default),
			{% for schema in schemas %}
				{% if schema.required is true %}
					{% if schema.type not in ["list","set","map"] %}
						{% if schema.depends_on is defined and schema.depends_on.attribute_name|last != "id" %}
							resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}", fmt.Sprintf("%v", searchInObject(resource{{schema.depends_on.resource_name | pascalize}}Test, {{schema.depends_on.attribute_name | make_dot_string("valid", "0") | quote}}))),
						{% elif schema.depends_on is not defined %}
							{% if schema.attribute in unique_attribute %}
								resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}", rName),
							{% else %}
								resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}", fmt.Sprintf("%v", searchInObject(resource{{name | pascalize}}Test, {{[] | make_dot_string(schema.attribute,"valid", "0") | quote}}))),
							{% endif %}
						{% endif %}
					{% elif schema.type in ["list", "set"] %}
						{% if schema.element.type == "resource" %}
							resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}.#", "1"),
							{{getTestCheckResourceAttrInternal(name, schema.element.schema, schema.attribute)}}
						{% elif schema.element.type == "schema" %}
							resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}.#", "2"),
							resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}.0", fmt.Sprintf("%v", searchInObject(resource{{name | pascalize}}Test, {{[] | make_dot_string(schema.attribute,"valid", "0") | quote}}))),
							resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}.1", fmt.Sprintf("%v", searchInObject(resource{{name | pascalize}}Test, {{[] | make_dot_string(schema.attribute,"valid", "1") | quote}}))),
						{% endif %}
					{% endif %}
				{% else %}
					{% if schema.type == "float" %}
						{% if schema.default is defined %}
							resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}", "{{schema.default}}"),
						{% else %}
							resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}", "0.0"),
						{% endif %}
					{% elif schema.type == "int" %}
						{% if schema.default is defined %}
							resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}", "{{schema.default}}"),
						{% else %}
							resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}", "0"),
						{% endif %}
					{% elif schema.type == "string" %}
						{% if schema.default is defined %}
							resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}", "{{schema.default}}"),
						{% else %}
							resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}", ""),
						{% endif %}
					{% elif schema.type == "bool" %}
						{% if schema.default is defined %}
							resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}", "{{schema.default}}"),
						{% else %}
							resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}", "false"),
						{% endif %}
					{% elif schema.type in ["list","set"]%}
						{% if schema.element.type == "schema" and schema.element.schema.default is defined %}
							resource.TestCheckResourceAttr(resourceName,"{{schema.attribute}}.#", "{{schema.element.schema.default | length}}"),
							{% for i in range(schema.element.schema.default | length) %}
							resource.TestCheckResourceAttr(resourceName,"{{schema.attribute}}.{{i}}", "{{schema.element.schema.default[i]}}"),
							{% endfor %}
						{% else %}
							resource.TestCheckResourceAttr(resourceName,"{{schema.attribute}}.#", "0"),
						{% endif %}
					{% endif %}
				{% endif %}	
			{% endfor %}
		),
	},
{% endmacro %}



{# -------------------------------------------Function for Config Without Optional---------------------------------------------- #}

{# ***** Macro : This will generate internal required attributes only for list,set having schema 'Elem' as resource block having default value ***** #}
{% macro getRequiredInternalAttributes(name, provider_name, schema, args, parentAttr,indent) %}
        {{-indent.append(0) or ""-}}
    	{{-indent.append(0) or ""-}}
		{% for sch in schema %}
			{% if sch.required is true %}
				{% if sch.type not in ["list","set","map"] %}
					{% if sch.depends_on is defined %}

						{{'  '*(indent | length)}}{{sch.attribute}} = {{provider_name | camelize}}_{{sch.depends_on.resource_name | snakify}}.test.{{sch.depends_on.attribute_name | make_dot_string}}
					{% else %} 

						{{'  '*(indent | length)}}{{sch.attribute}} = {{getValueType(sch)}}
							{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(parentAttr,sch.attribute, "valid", "0") | quote+')') or ""}}
					{% endif %}
				{% elif sch.type in ["list", "set"] %}
					{% if sch.element.type == "schema" %}
						{% if sch.element.schema.type not in ["list","set", "map"] %}

						{{'  '*(indent | length)}}{{sch.attribute}} = [{{getValueType(sch.element.schema)}},{{getValueType(sch.element.schema)}}]
						{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(parentAttr,sch.attribute, "valid", "0") | quote+')') or ""}}
						{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(parentAttr,sch.attribute, "valid", "1") | quote+')') or ""}}
						{% endif %}
					{% else %}

						{{'  '*(indent | length)}}{{sch.attribute}} {
							{{ getRequiredInternalAttributes(name, provider_name, sch.element.schema, args, parentAttr+'.'+sch.attribute, indent) }}
						{{'  '*(indent | length-1)}}}
					{% endif %}
				{% endif %}
			{% endif %}
        {% endfor %}
{% endmacro %}


{% macro printFunctionForConfig(name, provider_name, schemas,unique_attribute) %}
func CreateAcc{{name | pascalize}}Config(rName string) string {
	var resource string
	parentResources := getParent{{name | pascalize}}(rName)
	parentResources = parentResources[:len(parentResources)-1]
	resource += create{{name | pascalize}}Config(parentResources)
	resource += fmt.Sprintf(`
		resource  "{{provider_name | camelize}}_{{name | snakify}}" "test" {
			{% set args = [] %}
			{% for schema in schemas %}
				{% if schema.required is true %}
					{% if schema.type not in ["list","set","map"] %}
						{% if schema.depends_on is defined %}

							{{schema.attribute}} = {{provider_name | camelize}}_{{schema.depends_on.resource_name | snakify}}.test.{{schema.depends_on.attribute_name | make_dot_string}}
						{% else %}

							{% if schema.attribute in unique_attribute %}

							{{schema.attribute}} = {{getValueType(schema)}}
							{{- args.append('rName') or "" }}
							{% else %}

							{{schema.attribute}} = {{getValueType(schema)}}
							{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schema.attribute, "valid", "0") | quote+')') or ""}}
							{% endif %}
						{% endif %}
					{% elif schema.type in ["list", "set"] %}
						{% if schema.element.type == "schema" %}
							{% if schema.element.schema.type not in ["list","set", "map"] %}

							{{schema.attribute}} = [{{getValueType(schema.element.schema)}},{{getValueType(schema.element.schema)}}]
								{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schema.attribute, "valid", "0") | quote+')') or ""}}
								{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schema.attribute, "valid", "1") | quote+')') or ""}}
							{% endif %}
						{% else %}

							{{schema.attribute}} {
							{% set indent = [0,1,2]%}    
							{{getRequiredInternalAttributes(name,provider_name,schema.element.schema,args,schema.attribute,indent)}}
							}
						{% endif %}
					{% endif %}
				{% endif %}
			{% endfor %}
		}
	`,{{args | join(',\n')}})
	return resource
}
{% endmacro %}


{# ---------------------------------------------Steps to Check Create Config With Optional-------------------------------------------- #}
{# ***** Macro : This will generate internal steps for optional attributes list,set having schema 'Elem' as resource will have default value ***** #}

{% macro getTestCheckResourceAttrInternalWithOptional(name, schemas, parentAttr) %}
	{% for schema in schemas %}
		{% if schema.type not in ["list","set","map"] %}
			resource.TestCheckResourceAttr(resourceName, "{{parentAttr+ '.0.' +schema.attribute}}", fmt.Sprintf("%v", searchInObject(resource{{name | pascalize}}Test, {{[] | make_dot_string(parentAttr | eliminate_zeroes,schema.attribute,"valid", "0") | quote}}))),
		{% elif schema.type in ["list", "set"] %}
			{% if schema.element.type == "resource" %}
				resource.TestCheckResourceAttr(resourceName, "{{parentAttr+ '.0.' + schema.attribute}}.#", "1"),
				{{getTestCheckResourceAttrInternalWithOptional(name, schema.element.schema, parentAttr + '.0.' + schema.attribute)}}
			{% elif schema.element.type == "schema" %}
				resource.TestCheckResourceAttr(resourceName, "{{parentAttr+ '.0.' + schema.attribute}}.#", "2"),
				resource.TestCheckResourceAttr(resourceName, "{{parentAttr+ '.0.' + schema.attribute}}.0", fmt.Sprintf("%v", searchInObject(resource{{name | pascalize}}Test, {{[] | make_dot_string(parentAttr | eliminate_zeroes,schema.attribute,"valid", "0") | quote}}))),
				resource.TestCheckResourceAttr(resourceName, "{{parentAttr+ '.0.' + schema.attribute}}.1", fmt.Sprintf("%v", searchInObject(resource{{name | pascalize}}Test, {{[] | make_dot_string(parentAttr | eliminate_zeroes,schema.attribute,"valid", "1") | quote}}))),
			{% endif %}
		{% endif %}
	{% endfor %}
{% endmacro %}

{% macro printStepsForConfigWithOptional(name,provider_name,schemas,unique_attribute) %}
	{
		Config: CreateAcc{{name | pascalize}}ConfigWithOptional(rName),
		Check: resource.ComposeTestCheckFunc(
			testAccCheck{{provider_name | pascalize}}{{name | pascalize}}Exists(resourceName, &{{name | camelize}}_updated),
			{% for schema in schemas %}
				{% if schema.type not in ["list","set","map"] %}
					{% if schema.depends_on is defined and schema.depends_on.attribute_name|last != "id" %}
                        resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}", fmt.Sprintf("%v", searchInObject(resource{{schema.depends_on.resource_name | pascalize}}Test, {{schema.depends_on.attribute_name | make_dot_string("valid", "0") | quote}}))),
                    {% elif schema.depends_on is not defined %}
						{% if schema.required is true and schema.attribute in unique_attribute %}
						resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}", rName),
						{% else %}
						resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}", fmt.Sprintf("%v", searchInObject(resource{{name | pascalize}}Test, {{[] | make_dot_string(schema.attribute,"valid", "0") | quote}}))),
						{% endif %}
					{% endif %}
				{% elif schema.type in ["list", "set"] %}
                    {% if schema.element.type == "resource" %}
						resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}.#", "1"),
                        {{getTestCheckResourceAttrInternalWithOptional(name, schema.element.schema, schema.attribute)}}
                    {% elif schema.element.type == "schema" %}
                        resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}.#", "2"),
                        resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}.0", fmt.Sprintf("%v", searchInObject(resource{{name | pascalize}}Test, {{[] | make_dot_string(schema.attribute,"valid", "0") | quote}}))),
                        resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}.1", fmt.Sprintf("%v", searchInObject(resource{{name | pascalize}}Test, {{[] | make_dot_string(schema.attribute,"valid", "1") | quote}}))),
                    {% endif %}
				{% endif %}
			{% endfor %}
			testAccCheck{{provider_name | pascalize}}{{name | pascalize}}IdEqual(&{{name | camelize}}_default, &{{name | camelize}}_updated),
		),
	},
{% endmacro %}



{# ---------------------------------------------Function for Config With Optional-------------------------------------------- #}
{% macro printFunctionForConfigWithOptional(name,provider_name,schemas,unique_attribute) %}
func CreateAcc{{name | pascalize}}ConfigWithOptional(rName string) string {
	var resource string 
	parentResources := getParent{{name | pascalize}}(rName)
	parentResources = parentResources[:len(parentResources)-1]

	resource += create{{name | pascalize}}Config(parentResources)

	resource += fmt.Sprintf(`
		resource  "{{provider_name | camelize}}_{{name | snakify}}" "test" {
			{% set args = [] %}
			{% for schema in schemas %}
				{% if schema.type not in ["list","set","map"] %}
					{% if schema.depends_on is defined %}

						{{schema.attribute}} = {{provider_name | camelize}}_{{schema.depends_on.resource_name | snakify}}.test.{{schema.depends_on.attribute_name | make_dot_string}}
					{% else %}
						{% if schema.required is true and schema.attribute in unique_attribute %}

						{{schema.attribute}} = {{getValueType(schema)}}
						{{- args.append('rName') or "" }}
						{% else %}

						{{schema.attribute}} = {{getValueType(schema)}}
						{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schema.attribute, "valid", "0") | quote+')') or ""}}
						{% endif %}
					{% endif %}
				{% elif schema.type in ["list", "set"] %}
                    {% if schema.element.type == "schema" %}
                        {% if schema.element.schema.type not in ["list","set", "map"] %}

				        {{schema.attribute}} = [{{getValueType(schema.element.schema)}},{{getValueType(schema.element.schema)}}]
                            {{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schema.attribute, "valid", "0") | quote+')') or ""}}
                            {{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schema.attribute, "valid", "1") | quote+')') or ""}}
                        {% endif %}
                    {% else %}

                        {{schema.attribute}} {
						{% set indent = []%}    
                        {{getInternalAttributes(name,provider_name,schema.element.schema,args,schema.attribute,indent)}}
                        }
                    {% endif %}
				{% endif %}
			{% endfor %}
		}
	`,{{args | join(',\n')}})
	return resource
}
{% endmacro %}

{# ---------------------------------------------Steps to Check Update Optional-------------------------------------------- #}

{% set allOptionalFunctions = [] %}

{# ***** Macro : This will store internal optional attributes in list for (list, set) update attr function ***** #}
{% macro genUpdateFunctionInternal(name, provider_name, schemas, parentAttr) %}
	{% for schema in schemas %}
		{% if schema.optional is true and schema.type not in ["list", "map", "set" ]%}
			{{allOptionalFunctions.append(parentAttr +"."+ schema.attribute) or ""}}
		{% elif schema.optional is true and schema.type in ["list", "set"] %}
			{% if schema.element.type == "schema" %}
				{{allOptionalFunctions.append(parentAttr + '.'+ schema.attribute) or ""}}
			{% elif schema.element.type == "resource" %}
				{{ genUpdateFunctionInternal(name, provider_name, schema.element.schema, parentAttr+'.'+schema.attribute) }}
			{% endif %}
		{% endif %}
	{% endfor %}
{% endmacro %}

{# ***** Macro : This will store optional attributes in list for update attr function ***** #}
{% macro genUpdateFunction(name,provider_name,schemas) %}
		{% for schema in schemas %}
			{% if schema.optional is true and schema.type not in ["list", "map", "set" ] %}
				{{allOptionalFunctions.append(schema.attribute) or ""}}
			{% elif schema.optional is true and schema.type in ["list", "set"] %}
				{% if schema.element.type == "schema" %}
					{{allOptionalFunctions.append(schema.attribute) or ""}}
				{% else %}
					{{ genUpdateFunctionInternal(name, provider_name, schema.element.schema, schema.attribute) }}
				{% endif %}
			{% endif %}
		{% endfor %}
{% endmacro %}	

{# ***** Macro : This will generate internal steps for list,set for update attribute optional ***** #}
{% macro getInternalStepsForUpdatedAttr(name, provider_name, schemas, parentAttr) %}
	{% for schema in schemas %}
		{% if schema.optional is true and schema.type not in ["list", "map", "set" ]%}
			valid = searchInObject(resource{{name | pascalize}}Test, {{[] | make_dot_string(parentAttr | eliminate_zeroes+ '.' +schema.attribute,"valid") | quote}}).([]interface{})
			for _, value := range valid {
				v := fmt.Sprintf("%v", value)
				testSteps = append(testSteps,resource.TestStep{
					Config: CreateAcc{{name | pascalize}}UpdatedAttr{{parentAttr|eliminate_zeroes_and_capitalize+schema.attribute|pascalize}}(rName,value),
					Check: resource.ComposeTestCheckFunc(
						testAccCheck{{provider_name | pascalize}}{{name | pascalize}}Exists(resourceName, {{name | camelize}}_updated),
						resource.TestCheckResourceAttr(resourceName, {{[] | make_dot_string(parentAttr+ '.0.' +schema.attribute) | quote}}, v),
						testAccCheck{{provider_name | pascalize}}{{name | pascalize}}IdEqual({{name | camelize}}_default, {{name | camelize}}_updated),
					), 
				})
			} 
		{% elif schema.optional is true and schema.type in ["list", "set"] %}
			{% if schema.element.type == "schema" %}
				valid = searchInObject(resource{{name | pascalize}}Test, {{[] | make_dot_string(parentAttr | eliminate_zeroes + '.' +schema.attribute,"valid") | quote}}).([]interface{})
				for _, value := range valid {
					v := fmt.Sprintf("%v", value)
					testSteps = append(testSteps,resource.TestStep{
						Config: CreateAcc{{name | pascalize}}UpdatedAttr{{parentAttr|eliminate_zeroes_and_capitalize+schema.attribute|pascalize}}(rName,value),
						Check: resource.ComposeTestCheckFunc(
							testAccCheck{{provider_name | pascalize}}{{name | pascalize}}Exists(resourceName, {{name | camelize}}_updated),
							resource.TestCheckResourceAttr(resourceName, {{[] | make_dot_string(parentAttr+ '.0.' +schema.attribute + '.0') | quote}}, v),
							testAccCheck{{provider_name | pascalize}}{{name | pascalize}}IdEqual({{name | camelize}}_default, {{name | camelize}}_updated),
						), 
					})
				} 
			{% elif schema.element.type == "resource" %}
				{{ getInternalStepsForUpdatedAttr(name, provider_name, schema.element.schema, parentAttr+'.0.'+schema.attribute) }}
			{% endif %}
		{% endif %}
	{% endfor %}
{% endmacro %}

{% macro printGenerateStepsForUpdatedAttr(name,provider_name,schemas,unique_attribute) %}
	func generateStepForUpdatedAttr{{name|pascalize}}(rName string, resourceName string,{{name | camelize}}_default,{{name | camelize}}_updated *models.{{name | pascalize}}) []resource.TestStep{
		testSteps := make([]resource.TestStep, 0, 1)
		var valid []interface{} 
		{% for schema in schemas %}
			{% if schema.optional is true and schema.type not in ["list", "map", "set" ]%}
				valid = searchInObject(resource{{name | pascalize}}Test, {{[] | make_dot_string(schema.attribute,"valid") | quote}}).([]interface{})
				for _, value := range valid {
					v := fmt.Sprintf("%v", value)
					testSteps = append(testSteps,resource.TestStep{
						Config: CreateAcc{{name | pascalize}}UpdatedAttr{{schema.attribute|pascalize}}(rName, value),
						Check: resource.ComposeTestCheckFunc(
							testAccCheck{{provider_name | pascalize}}{{name | pascalize}}Exists(resourceName, {{name | camelize}}_updated),
							resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}", v),
							testAccCheck{{provider_name | pascalize}}{{name | pascalize}}IdEqual({{name | camelize}}_default, {{name | camelize}}_updated),
						), 
					})
				} 
			{% elif schema.optional is true and schema.type in ["list", "set"] %}
				{% if schema.element.type == "schema" %}
					valid = searchInObject(resource{{name | pascalize}}Test, {{[] | make_dot_string( schema.attribute,"valid") | quote}}).([]interface{})
					for _, value := range valid {
						v := fmt.Sprintf("%v", value)
						testSteps = append(testSteps,resource.TestStep{
							Config: CreateAcc{{name | pascalize}}UpdatedAttr{{schema.attribute|pascalize}}(rName,value),
							Check: resource.ComposeTestCheckFunc(
								testAccCheck{{provider_name | pascalize}}{{name | pascalize}}Exists(resourceName, {{name | camelize}}_updated),
								resource.TestCheckResourceAttr(resourceName, {{[] | make_dot_string(schema.attribute+'.0') | quote}}, v),
								testAccCheck{{provider_name | pascalize}}{{name | pascalize}}IdEqual({{name | camelize}}_default, {{name | camelize}}_updated),
							), 
						})
					}
				{% else %}
					{{ getInternalStepsForUpdatedAttr(name, provider_name, schema.element.schema, schema.attribute) }}
				{% endif %}
			{% endif %}
		{% endfor %}
		return testSteps
	}
{% endmacro %}	




{# -------------------------------------------Function for Update Optional---------------------------------------------- #}

{# ***** Macro : This will generate internal attribute for list,set having 'Elem' as resource for update attribute with provided value  ***** #}
{% macro getInternalAttributesForUpdatedAttr(name, provider_name, schema, args, parentAttr, func,indent) %}
    {{-indent.append(0) or ""-}}
    {{-indent.append(0) or ""-}}
    {% for sch in schema %}
            {% if sch.type not in ["list","set","map"] %}
                {% if sch.depends_on is defined %}
                    
                        {{'  '*(indent | length)}}{{sch.attribute}} = {{provider_name | camelize}}_{{sch.depends_on.resource_name | snakify}}.test.{{sch.depends_on.attribute_name | make_dot_string}}
                {% else %}
					{% if func | get_first == sch.attribute %}
					
						{{'  '*(indent | length)}}{{sch.attribute}} = {{getValueType(sch)}}
						{{- args.append('value') or ""}}
					{% else %}
                        
                        {{'  '*(indent | length)}}{{sch.attribute}} = {{getValueType(sch)}}
                        {{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(parentAttr,sch.attribute, "valid", "0") | quote+')') or ""}}
					{% endif%}
				{% endif %}
            {% elif sch.type in ["list", "set"] %}
                {% if sch.element.type == "schema" %}
					{% if sch.element.schema.type not in ["list","set", "map"] %}
						{% if func | get_first == sch.attribute %}

						{{'  '*(indent | length)}}{{sch.attribute}} = [{{getValueType(sch.element.schema)}}]
						{{- args.append('value') or ""}}
						{% else %}

						{{'  '*(indent | length)}}{{sch.attribute}} = [{{getValueType(sch.element.schema)}}, {{getValueType(sch.element.schema)}}]
						{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(sch.attribute, "valid", "0") | quote+')') or ""}}
						{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(sch.attribute, "valid", "1") | quote+')') or ""}}
						{% endif %}
					{% endif %}  
                {% else %}
					{% if func|get_first == sch.attribute %}

						{{'  '*(indent | length)}}{{sch.attribute}} {
						{{getInternalAttributesForUpdatedAttr(name,provider_name,sch.element.schema,args,sch.attribute,func | eliminate_first,indent)}}
						{{'  '*(indent | length-1)}}}
					{% else %}

						{{'  '*(indent | length)}}{{sch.attribute}} {
                        {{getInternalAttributes(name, provider_name, sch.element.schema, args, parentAttr+'.'+sch.attribute,indent) }}
                        {{'  '*(indent | length-1)}}}
					{% endif %}
                {% endif %}
            {% endif %}
        {% endfor %}
{% endmacro %}


{% macro printFunctionForUpdatedAttr(name,provider_name,schemas,unique_attribute)%}
	{% for func in allOptionalFunctions %}
		func CreateAcc{{name | pascalize}}UpdatedAttr{{func | eliminate_dots_and_capitalize}}(rName string, value interface{}) string {
			var resource string
			parentResources := getParent{{name | pascalize}}(rName)
			parentResources = parentResources[:len(parentResources)-1]
			resource += create{{name | pascalize}}Config(parentResources)
			resource += fmt.Sprintf(`
			resource "{{provider_name | camelize}}_{{name | snakify}}" "test" {
			{% set args = [] %}
			{% for schema in schemas %}
				{% if schema.type not in ["list","set","map"] %}
					{% if schema.depends_on is defined %}

							{{schema.attribute}} = {{provider_name | camelize}}_{{schema.depends_on.resource_name | snakify}}.test.{{schema.depends_on.attribute_name | make_dot_string}}
					{% else %}
						{% if func | get_first == schema.attribute %}
							
							{{schema.attribute}} = {{getValueType(schema)}}
							{{- args.append('value') or ""}}
						{% else %}
							{% if schema.required is true and schema.attribute in unique_attribute %}

							{{schema.attribute}} = {{getValueType(schema)}}
							{{- args.append('rName') or ""}}
							{% else %}

							{{schema.attribute}} = {{getValueType(schema)}}
							{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schema.attribute, "valid", "0") | quote+')') or ""}}
							{% endif %}
						{% endif %}
					{% endif %}
				{% elif schema.type in ["list", "set"] %}
                    {% if schema.element.type == "schema" %}
                        {% if schema.element.schema.type not in ["list","set", "map"] %}
							{% if func | get_first == schema.attribute %}

							{{schema.attribute}} = [{{getValueType(schema.element.schema)}}]
							{{- args.append('value') or ""}}
							{% else %}

							{{schema.attribute}} = [{{getValueType(schema.element.schema)}}, {{getValueType(schema.element.schema)}}]
							{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schema.attribute, "valid", "0") | quote+')') or ""}}
							{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schema.attribute, "valid", "1") | quote+')') or ""}}
							{% endif %}
                        {% endif %}
                    {% else %}
						{% if func|get_first == schema.attribute %}

							{{schema.attribute}} {
							{% set indent = []%}    
							{{getInternalAttributesForUpdatedAttr(name,provider_name,schema.element.schema,args,schema.attribute,func | eliminate_first,indent)}}
							}
						{% else %}

							{{schema.attribute}} {
							{% set indent = []%}    
							{{getInternalAttributes(name,provider_name,schema.element.schema,args,schema.attribute,indent)}}
							}
						{% endif %}
					{% endif %}
				{% endif %}
			{% endfor %}
		}
	`,{{args | join(',\n')}})
			return resource
		}
	{% endfor %}
{% endmacro %}


{# ---------------------------------------------Steps to Check Negative Test Cases-------------------------------------------- #}

{# ***** Macro : This will generate internal steps for list,set having 'Elem' as resource for update attribute with negative invalids value  ***** #}

{% macro getInternalNegativeSteps(name, provider_name, schemas, parentAttr) %}
	{% for schema in schemas %}
		{% if schema.optional is true and schema.type not in ["list", "map", "set"] and schema.validation is defined %}
			invalid = searchInObject(resource{{name | pascalize}}Test, {{[] | make_dot_string(parentAttr | eliminate_zeroes+ '.' +schema.attribute,"invalid") | quote}}).([]interface{})
			for _, value := range invalid {
				testSteps = append(testSteps,resource.TestStep{
					Config: CreateAcc{{name | pascalize}}UpdatedAttr{{parentAttr|eliminate_zeroes_and_capitalize+schema.attribute|pascalize}}(rName,value),
					{% if schema.validation is defined %}
					ExpectError: regexp.MustCompile(expectErrorMap["{{schema.validation.func_name}}"]),
					{% else %}
					ExpectError: regexp.MustCompile(""),
					{% endif %} 
				})
			} 
		{% elif schema.optional is true and schema.type in ["list", "set"] %}
			{% if schema.element.type == "schema" and schema.validation is defined  %}
				invalid = searchInObject(resource{{name | pascalize}}Test, {{[] | make_dot_string(parentAttr | eliminate_zeroes + '.' +schema.attribute,"invalid") | quote}}).([]interface{})
				for _, value := range invalid {
					testSteps = append(testSteps,resource.TestStep{
						Config: CreateAcc{{name | pascalize}}UpdatedAttr{{parentAttr|eliminate_zeroes_and_capitalize+schema.attribute|pascalize}}(rName,value),
						{% if schema.validation is defined %}
						ExpectError: regexp.MustCompile(expectErrorMap["{{schema.validation.func_name}}"]),
						{% else %}
						ExpectError: regexp.MustCompile(""),
						{% endif %}  
					})
				} 
			{% elif schema.element.type == "resource" %}
				{{ getInternalNegativeSteps(name, provider_name, schema.element.schema, parentAttr+'.0.'+schema.attribute) }}
			{% endif %}
		{% endif %}
	{% endfor %}
{% endmacro %}


{% macro printGenerateNegativeSteps(name,provider_name,schemas, unique_attribute) %}
	func generateNegativeSteps{{name|pascalize}}(rName string, resourceName string) []resource.TestStep{
		//Use Update Config Function with false value 
		testSteps := make([]resource.TestStep, 0, 1)
		var invalid []interface{} 
		{% for schema in schemas %}
			{% if schema.optional is true and schema.type not in ["list", "map", "set"]  and schema.validation is defined %}
				invalid = searchInObject(resource{{name | pascalize}}Test, {{[] | make_dot_string(schema.attribute,"invalid") | quote}}).([]interface{})
				for _, value := range invalid {
					testSteps = append(testSteps,resource.TestStep{
						Config: CreateAcc{{name | pascalize}}UpdatedAttr{{schema.attribute|pascalize}}(rName, value),
						{% if schema.validation is defined %}
						ExpectError: regexp.MustCompile(expectErrorMap["{{schema.validation.func_name}}"]),
						{% else %}
						ExpectError: regexp.MustCompile(""),
						{% endif %} 
					})
				} 
			{% elif schema.optional is true and schema.type in ["list", "set"] %}
				{% if schema.element.type == "schema" and schema.validation is defined  %}
					invalid = searchInObject(resource{{name | pascalize}}Test, {{[] | make_dot_string( schema.attribute,"invalid") | quote}}).([]interface{})
					for _, value := range invalid {
						testSteps = append(testSteps,resource.TestStep{
							Config: CreateAcc{{name | pascalize}}UpdatedAttr{{schema.attribute|pascalize}}(rName,value),
							{% if schema.validation is defined %}
							ExpectError: regexp.MustCompile(expectErrorMap["{{schema.validation.func_name}}"]),
							{% else %}
							ExpectError: regexp.MustCompile(""),
							{% endif %}
						})
					}
				{% else %}
					{{ getInternalNegativeSteps(name, provider_name, schema.element.schema, schema.attribute) }}
				{% endif %}
			{% endif %}
		{% endfor %}
		testSteps = append(testSteps, resource.TestStep{
			Config: CreateAcc{{name | pascalize}}Config(rName),
		})
		return testSteps
	}
{% endmacro %}


{# ---------------------------------------------Steps to Check Multiple Create Delete Test Cases-------------------------------------------- #}
{% set multipleCreateDeleteAttr = {'value': ""} %}

{# ***** Macro : This classify the required attributes to their datatypes and append them in list  ***** #}
{% macro setRequiredAttribute(schemas,stringRequired,intFloatRequired,otherRequired) %}
	{% for schema in schemas %}
		{% if schema.type == "string" and schema.required is true and schema.depends_on is not defined %}
			{{stringRequired.append(schema) or ""}}
		{% elif schema.type in ["int", "float"] and schema.required is true and schema.depends_on is not defined %}
			{{intFloatRequired.append(schema) or ""}}
		{% elif schema.type in ["list", "set"] and schema.required is true and schema.depends_on is not defined %}
			{{otherRequired.append(schema) or ""}}
		{% endif %}
	{% endfor %}
{% endmacro %}

{# ***** Macro : This classify attributes and store the attribute name used for multiple-create-delete test case for (list,set) attributes ***** #}
{% macro getMultipleCreateDeleteAttrWrapper(schemas) %}
	{% set stringRequired = [] %}
	{% set intFloatRequired = [] %}
	{% set otherRequired = [] %}
	{{setRequiredAttribute(schemas, stringRequired, intFloatRequired, otherRequired)}}
	{% if stringRequired|length > 0 %}
		{% if multipleCreateDeleteAttr.update({'value': multipleCreateDeleteAttr.value+"."+stringRequired[0]["attribute"]}) %} {% endif %}
	{% elif intFloatRequired|length > 0 %}
		{% if multipleCreateDeleteAttr.update({'value': multipleCreateDeleteAttr.value+"."+intFloatRequired[0]["attribute"]}) %} {% endif %}
	{% elif otherRequired|length > 0 %}
		{% if otherRequired[0].element.type == "schema" %}
			{% if multipleCreateDeleteAttr.update({'value': otherRequired[0]["attribute"]}) %} {% endif %}
		{% else %}
			{% if multipleCreateDeleteAttr.update({'value': multipleCreateDeleteAttr.value+"."+otherRequired[0]["attribute"]}) %} {% endif %}
			{{getMultipleCreateDeleteAttrWrapper(otherRequired[0].element.schema)}}
		{% endif %}
	{% endif %}
{% endmacro %}

{# ***** Macro : This classify attributes and store the attribute name used for multiple-create-delete test case ***** #}
{% macro getMultipleCreateDeleteAttr(schemas) %}
	{% set stringRequired = [] %}
	{% set intFloatRequired = [] %}
	{% set otherRequired = [] %}
	{{setRequiredAttribute(schemas, stringRequired, intFloatRequired, otherRequired)}}
	{% if stringRequired|length > 0 %}
		{% if multipleCreateDeleteAttr.update({'value': stringRequired[0]["attribute"]}) %} {% endif %}
	{% elif intFloatRequired|length > 0 %}
		{% if multipleCreateDeleteAttr.update({'value': intFloatRequired[0]["attribute"]}) %} {% endif %}
	{% elif otherRequired|length > 0 %}
		{% if otherRequired[0].element.type == "schema" %}
			{% if multipleCreateDeleteAttr.update({'value': otherRequired[0]["attribute"]}) %} {% endif %}
		{% else %}
			{% if multipleCreateDeleteAttr.update({'value': otherRequired[0]["attribute"]}) %} {% endif %}
			{{getMultipleCreateDeleteAttrWrapper(otherRequired[0].element.schema)}}
		{% endif %}
	{% endif %}
{% endmacro %}
{# -------------------------------------------Function for Multiple Config ---------------------------------------------- #}

{# ***** Macro : This will generate internal attribute for list,set having 'Elem' as resource for multiple create delete test case with provided value  ***** #}
{% macro getInternalAttributesForMultiple(name, provider_name, schema, args, parentAttr, attr, indent) %}
    {{-indent.append(0) or ""-}}
    {{-indent.append(0) or ""-}}
    {% for sch in schema %}
            {% if sch.type not in ["list","set","map"] %}
                {% if sch.depends_on is defined %}
                    
                        {{'  '*(indent | length)}}{{sch.attribute}} = {{provider_name | camelize}}_{{sch.depends_on.resource_name | snakify}}.test.{{sch.depends_on.attribute_name | make_dot_string}}
                {% else %}
					{% if attr | get_first == sch.attribute %}
					
						{{'  '*(indent | length)}}{{sch.attribute}} = {{getValueType(sch)}}
						{{- args.append('value') or ""}}
					{% else %}
                        
                        {{'  '*(indent | length)}}{{sch.attribute}} = {{getValueType(sch)}}
                        {{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(parentAttr,sch.attribute, "valid", "0") | quote+')') or ""}}
					{% endif%}
				{% endif %}
            {% elif sch.type in ["list", "set"] %}
                {% if sch.element.type == "schema" %}
					{% if sch.element.schema.type not in ["list","set", "map"] %}
						{% if attr | get_first == sch.attribute %}

						{{'  '*(indent | length)}}{{sch.attribute}} = [{{getValueType(sch.element.schema)}}]
						{{- args.append('value') or ""}}
						{% else %}

						{{'  '*(indent | length)}}{{sch.attribute}} = [{{getValueType(sch.element.schema)}}, {{getValueType(sch.element.schema)}}]
						{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(sch.attribute, "valid", "0") | quote+')') or ""}}
						{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(sch.attribute, "valid", "1") | quote+')') or ""}}
						{% endif %}
					{% endif %}  
                {% else %}
					{% if attr|get_first == sch.attribute %}

						{{'  '*(indent | length)}}{{sch.attribute}} {
						{{getInternalAttributesForMultiple(name,provider_name,sch.element.schema,args,sch.attribute,attr | eliminate_first,indent)}}
						{{'  '*(indent | length-1)}}}
					{% else %}

						{{'  '*(indent | length)}}{{sch.attribute}} {
                        {{getInternalAttributes(name, provider_name, sch.element.schema, args, parentAttr+'.'+sch.attribute,indent) }}
                        {{'  '*(indent | length-1)}}}
					{% endif %}
                {% endif %}
            {% endif %}
        {% endfor %}
{% endmacro %}


{% macro printFunctionForMultipleConfig(name,provider_name,schemas) %}
	func CreateAcc{{name | pascalize}}MultipleConfig(rName string) string {
		var resource string
		parentResources := getParent{{name | pascalize}}(rName)
		parentResources = parentResources[:len(parentResources)-1]
		resource += create{{name | pascalize}}Config(parentResources)
		multipleValues := searchInObject(resource{{name | pascalize}}Test, {{(multipleCreateDeleteAttr.value+".multiple_valids") | quote}}).([]interface{})
		for i,val := range multipleValues {
			resource += fmt.Sprintf(`
			resource "{{provider_name | camelize}}_{{name | snakify}}" "test%d" {
			{% set args = [] %}
			{% for schema in schemas %}
				{% if schema.type not in ["list","set","map"] %}
					{% if schema.depends_on is defined %}

							{{schema.attribute}} = {{provider_name | camelize}}_{{schema.depends_on.resource_name | snakify}}.test.{{schema.depends_on.attribute_name | make_dot_string}}
					{% else %}
						{% if multipleCreateDeleteAttr.value | get_first == schema.attribute %}
							
							{{schema.attribute}} = {{getValueType(schema)}}
							{{- args.append('val') or ""}}
						{% else %}

							{{schema.attribute}} = {{getValueType(schema)}}
							{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schema.attribute, "valid", "0") | quote+')') or ""}}
						{% endif %}
					{% endif %}
				{% elif schema.type in ["list", "set"] %}
					{% if schema.element.type == "schema" %}
						{% if schema.element.schema.type not in ["list","set", "map"] %}
							{% if multipleCreateDeleteAttr.value | get_first == schema.attribute %}

							{{schema.attribute}} = [{{getValueType(schema.element.schema)}}]
							{{- args.append('val') or ""}}
							{% else %}

							{{schema.attribute}} = [{{getValueType(schema.element.schema)}}, {{getValueType(schema.element.schema)}}]
							{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schema.attribute, "valid", "0") | quote+')') or ""}}
							{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schema.attribute, "valid", "1") | quote+')') or ""}}
							{% endif %}
						{% endif %}
					{% else %}
						{% if multipleCreateDeleteAttr.value | get_first == schema.attribute %}

							{{schema.attribute}} {
							{% set indent = []%}    
							{{getInternalAttributesForMultiple(name,provider_name,schema.element.schema,args,schema.attribute,multipleCreateDeleteAttr.value | eliminate_first,indent)}}
							}
						{% else %}

							{{schema.attribute}} {
							{% set indent = []%}    
							{{getInternalAttributes(name,provider_name,schema.element.schema,args,schema.attribute,indent)}}
							}
						{% endif %}
					{% endif %}
				{% endif %}
			{% endfor %}
			}
		`, i, {{args | join(',\n')}})
		}
		return resource
	}
{% endmacro %}

{# ---------------------------------------------Steps to Update Required Attribute---------------------------------------------- #}

{% set allRequiredAttr = [] %}

{# ***** Macro : This will store the required attribute for (list,set) in list  ***** #}
{% macro genAllRequiredAttrInternal(name, provider_name, schemas, parentAttr) %}
	{% for schema in schemas %}
		{% if schema.required is true and schema.depends_on is not defined %}
			{% if schema.type not in ["list", "map", "set" ]%}
				{{allRequiredAttr.append(parentAttr +"."+ schema.attribute) or ""}}
			{% elif schema.type in ["list", "set"] %}
				{% if schema.element.type == "schema" %}
					{{allRequiredAttr.append(parentAttr + '.'+ schema.attribute) or ""}}
				{% elif schema.element.type == "resource" %}
					{{ genAllRequiredAttrInternal(name, provider_name, schema.element.schema, parentAttr+'.'+schema.attribute) }}
				{% endif %}
			{% endif %}
		{% endif %}
	{% endfor %}
{% endmacro %}

{# ***** Macro : This will store all the required attribute in the list  ***** #}
{% macro genAllRequiredAttr(name,provider_name,schemas) %}
		{% for schema in schemas %}
			{% if schema.required is true and schema.depends_on is not defined %}
				{% if schema.type not in ["list", "map", "set" ] %}
					{{allRequiredAttr.append(schema.attribute) or ""}}
				{% elif schema.type in ["list", "set"] %}
					{% if schema.element.type == "schema" %}
						{{allRequiredAttr.append(schema.attribute) or ""}}
					{% else %}
						{{ genAllRequiredAttrInternal(name, provider_name, schema.element.schema, schema.attribute) }}
					{% endif %}
				{% endif %}
			{% endif %}
		{% endfor %}
{% endmacro %}	


{# ***** Macro : This will generate internal step for list,set having 'Elem' as resource for update required attribute with next valid value  ***** #}
{% macro getInternalStepsForUpdatedRequiredAttr(name, provider_name, schemas, parentAttr) %}
	{% for schema in schemas %}
		{% if schema.required is true and schema.depends_on is not defined and schema.type not in ["list", "map", "set" ]%}
			value = searchInObject(resource{{name | pascalize}}Test, {{[] | make_dot_string(parentAttr | eliminate_zeroes+ '.' +schema.attribute,"valid.1") | quote}})
			testSteps = append(testSteps,resource.TestStep{
				Config: CreateAcc{{name | pascalize}}UpdateRequired{{parentAttr|eliminate_zeroes_and_capitalize+schema.attribute|pascalize}}(rName),
				Check: resource.ComposeTestCheckFunc(
					testAccCheck{{provider_name | pascalize}}{{name | pascalize}}Exists(resourceName, {{name | camelize}}_updated),
					resource.TestCheckResourceAttr(resourceName, {{[] | make_dot_string(parentAttr+ '.0.' +schema.attribute) | quote}}, fmt.Sprintf("%v", value)),
					testAccCheck{{provider_name | pascalize}}{{name | pascalize}}IdNotEqual({{name | camelize}}_default, {{name | camelize}}_updated),
				), 
			})
		{% elif schema.required is true and schema.depends_on is not defined and schema.type in ["list", "set"] %}
			{% if schema.element.type == "schema" %}
				value = searchInObject(resource{{name | pascalize}}Test, {{[] | make_dot_string(parentAttr | eliminate_zeroes + '.' +schema.attribute,"valid.1") | quote}})
					testSteps = append(testSteps,resource.TestStep{
						Config: CreateAcc{{name | pascalize}}UpdateRequired{{parentAttr|eliminate_zeroes_and_capitalize+schema.attribute|pascalize}}(rName),
						Check: resource.ComposeTestCheckFunc(
							testAccCheck{{provider_name | pascalize}}{{name | pascalize}}Exists(resourceName, {{name | camelize}}_updated),
							resource.TestCheckResourceAttr(resourceName, {{[] | make_dot_string(parentAttr+ '.0.' +schema.attribute + '.0') | quote}}, fmt.Sprintf("%v", value)),
							testAccCheck{{provider_name | pascalize}}{{name | pascalize}}IdNotEqual({{name | camelize}}_default, {{name | camelize}}_updated),
						), 
					})
			{% elif schema.element.type == "resource" %}
				{{ getInternalStepsForUpdatedRequiredAttr(name, provider_name, schema.element.schema, parentAttr+'.0.'+schema.attribute) }}
			{% endif %}
		{% endif %}
	{% endfor %}
{% endmacro %}


{% macro printGenerateStepsForUpdatedRequiredAttr(name,provider_name,schemas) %}
	func generateStepForUpdatedRequiredAttr{{name|pascalize}}(rName string, resourceName string,{{name | camelize}}_default,{{name | camelize}}_updated *models.{{name | pascalize}}) []resource.TestStep{
		testSteps := make([]resource.TestStep, 0, 1)
		var value interface{} 
		{% for schema in schemas %}
			{% if schema.required is true and schema.depends_on is not defined and schema.type not in ["list", "map", "set" ]%}
				value = searchInObject(resource{{name | pascalize}}Test, {{[] | make_dot_string(schema.attribute,"valid.1") | quote}})
				testSteps = append(testSteps,resource.TestStep{
					Config: CreateAcc{{name | pascalize}}UpdateRequired{{schema.attribute|pascalize}}(rName),
					Check: resource.ComposeTestCheckFunc(
						testAccCheck{{provider_name | pascalize}}{{name | pascalize}}Exists(resourceName, {{name | camelize}}_updated),
						resource.TestCheckResourceAttr(resourceName, "{{schema.attribute}}", fmt.Sprintf("%v", value)),
						testAccCheck{{provider_name | pascalize}}{{name | pascalize}}IdNotEqual({{name | camelize}}_default, {{name | camelize}}_updated),
					), 
				})
			{% elif schema.required is true and schema.depends_on is not defined and schema.type in ["list", "set"] %}
				{% if schema.element.type == "schema" %}
					value = searchInObject(resource{{name | pascalize}}Test, {{[] | make_dot_string( schema.attribute,"valid.1") | quote}})
					testSteps = append(testSteps,resource.TestStep{
						Config: CreateAcc{{name | pascalize}}UpdateRequired{{schema.attribute|pascalize}}(rName),
						Check: resource.ComposeTestCheckFunc(
							testAccCheck{{provider_name | pascalize}}{{name | pascalize}}Exists(resourceName, {{name | camelize}}_updated),
							resource.TestCheckResourceAttr(resourceName, {{[] | make_dot_string(schema.attribute+'.0') | quote}}, fmt.Sprintf("%v", value)),
							testAccCheck{{provider_name | pascalize}}{{name | pascalize}}IdNotEqual({{name | camelize}}_default, {{name | camelize}}_updated),
						), 
					})
				{% else %}
					{{ getInternalStepsForUpdatedRequiredAttr(name, provider_name, schema.element.schema, schema.attribute) }}
				{% endif %}
			{% endif %}
		{% endfor %}
		return testSteps
	}
{% endmacro %}

{# -------------------------------------------Function for Update Required Attribute---------------------------------------------- #}

{% macro printFunctionForUpdateRequiredAttribute(name,provider_name,schemas) %}
	{% for attr in allRequiredAttr %}
		func CreateAcc{{name | pascalize}}UpdateRequired{{attr|eliminate_dots_and_capitalize}}(rName string) string {
			var resource string
			parentResources := getParent{{name | pascalize}}(rName)
			parentResources = parentResources[:len(parentResources)-1]
			resource += create{{name | pascalize}}Config(parentResources)
			value := searchInObject(resource{{name | pascalize}}Test, {{(attr+".valid.1") | quote}})
			resource += fmt.Sprintf(`
			resource "{{provider_name | camelize}}_{{name | snakify}}" "test" {
			{% set args = [] %}
			{% for schema in schemas %}
				{% if schema.type not in ["list","set","map"] %}
					{% if schema.depends_on is defined %}

							{{schema.attribute}} = {{provider_name | camelize}}_{{schema.depends_on.resource_name | snakify}}.test.{{schema.depends_on.attribute_name | make_dot_string}}
					{% else %}
						{% if attr | get_first == schema.attribute %}
							
							{{schema.attribute}} = {{getValueType(schema)}}
							{{- args.append('value') or ""}}
						{% else %}

							{{schema.attribute}} = {{getValueType(schema)}}
							{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schema.attribute, "valid", "0") | quote+')') or ""}}
						{% endif %}
					{% endif %}
				{% elif schema.type in ["list", "set"] %}
					{% if schema.element.type == "schema" %}
						{% if schema.element.schema.type not in ["list","set", "map"] %}
							{% if attr | get_first == schema.attribute %}

							{{schema.attribute}} = [{{getValueType(schema.element.schema)}}]
							{{- args.append('value') or ""}}
							{% else %}

							{{schema.attribute}} = [{{getValueType(schema.element.schema)}}, {{getValueType(schema.element.schema)}}]
							{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schema.attribute, "valid", "0") | quote+')') or ""}}
							{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schema.attribute, "valid", "1") | quote+')') or ""}}
							{% endif %}
						{% endif %}
					{% else %}
						{% if attr | get_first == schema.attribute %}

							{{schema.attribute}} {
							{% set indent = []%}    
							{{getInternalAttributesForMultiple(name,provider_name,schema.element.schema,args,schema.attribute,attr | eliminate_first, indent)}}
							}
						{% else %}

							{{schema.attribute}} {
							{% set indent = []%}    
							{{getInternalAttributes(name,provider_name,schema.element.schema,args,schema.attribute,indent)}}
							}
						{% endif %}
					{% endif %}
				{% endif %}
			{% endfor %}
			}
		`, {{args | join(',\n')}})
			return resource
		}
	{% endfor %}
{% endmacro %}




{# 
	▒█▀▀▄ █▀▀█ ▀▀█▀▀ █▀▀█  ▒█▀▀▀█ █▀▀█ █░░█ █▀▀█ █▀▀ █▀▀ 
	▒█░▒█ █▄▄█ ░░█░░ █▄▄█  ░▀▀▀▄▄ █░░█ █░░█ █▄▄▀ █░░ █▀▀ 
	▒█▄▄▀ ▀░░▀ ░░▀░░ ▀░░▀  ▒█▄▄▄█ ▀▀▀▀ ░▀▀▀ ▀░▀▀ ▀▀▀ ▀▀▀ 
	
#}


{# ----------------------------------Steps to check data source without required Attribute---------------------------------------- #}
{% macro printStepsWithoutRequiredArgumentsDS(name, schemas) %}
	{% for schema in schemas %}
		{% if schema.required is true %}
		{
			Config: CreateAcc{{name | pascalize}}DataSourceWithout{{schema.attribute | pascalize}}(rName),
			ExpectError: regexp.MustCompile(`Missing required argument`),
		},
		{% endif %}
	{% endfor %}
{% endmacro %}



{# ----------------------------------Function for data source without required Attribute---------------------------------------- #}
{% macro printFunctionWithoutRequiredArgumentsDS(name, provider_name, schemas) %}
	{% for schema in schemas %}
		{% if schema.required is true and schema.type != "map" %}
		func CreateAcc{{name | pascalize}}DataSourceWithout{{schema.attribute | pascalize}}(rName string) string{
			resource := CreateAcc{{name | pascalize}}ConfigWithOptional(rName)
			resource += fmt.Sprintf(`
			data "{{provider_name | camelize}}_{{name | snakify}}" "test" {
				{% set args = [] %}
				{% for schInner in schemas %}
					{% if schInner.required and schInner.attribute != schema.attribute %}
						{% if schInner.type not in ["list","set","map"] %}

							{{schInner.attribute}} = {{provider_name | camelize}}_{{name | snakify}}.test.{{schInner.attribute}}
						{% elif schInner.type in ["list", "set"] %}
							{% if schInner.element.type == "schema" %}
								{% if schInner.element.schema.type not in ["list","set", "map"] %}

								{{schInner.attribute}} = [{{getValueType(schInner.element.schema)}},{{getValueType(schInner.element.schema)}}]
									{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schInner.attribute, "valid", "0") | quote+')') or ""}}
									{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schInner.attribute, "valid", "1") | quote+')') or ""}}
								{% endif %}
							{% else %}

								{{schInner.attribute}} {
								{% set indent = []%}    
								{{getInternalAttributes(name,provider_name,schInner.element.schema,args,schInner.attribute,indent)}}
								}
							{% endif %}
						{% endif %}
					{% endif %}
				{% endfor %}
			}
			{% if args | length == 0  %}
			`)
			{% else %}
			`, {{args | join(',\n')}})
			{% endif %}
			return resource
		}
		{% endif %}
	{% endfor %}
{% endmacro %}

{# --------------------------------------------------Steps to check data source config---------------------------------------- ---#}

{% macro printStepsForConfigDataSource(schemas) %}
{% for schema in schemas %}
    {% if schema.type not in ["map","list","set"] and schema.exclude is not true %}
        resource.TestCheckResourceAttrPair(dataSourceName, "{{schema.attribute}}", resourceName, "{{schema.attribute}}"),
    {% elif schema.type in ["list","set"] and schema.exclude is not true %}
        resource.TestCheckResourceAttrPair(dataSourceName, "{{schema.attribute}}.#", resourceName, "{{schema.attribute}}.#"),
    {% endif %}
{% endfor %}
{% endmacro %}

{# --------------------------------------------------Function for data source config---------------------------------------- ---#}

{% macro printFunctionForDataSourceConfig(name, provider_name, schemas) %}
func CreateAcc{{name | pascalize}}DataSourceConfig(rName string) string{
	resource := CreateAcc{{name | pascalize}}ConfigWithOptional(rName)
	resource += fmt.Sprintf(`
	data "{{provider_name | camelize}}_{{name | snakify}}" "test" {
		{% set args = [] %}
		{% for schInner in schemas %}
			{% if schInner.required %}
				{% if schInner.type not in ["list","set","map"] %}

					{{schInner.attribute}} = {{provider_name | camelize}}_{{name | snakify}}.test.{{schInner.attribute}}
				{% elif schInner.type in ["list", "set"] %}
					{% if schInner.element.type == "schema" %}
						{% if schInner.element.schema.type not in ["list","set", "map"] %}

						{{schInner.attribute}} = [{{getValueType(schInner.element.schema)}},{{getValueType(schInner.element.schema)}}]
							{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schInner.attribute, "valid", "0") | quote+')') or ""}}
							{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schInner.attribute, "valid", "1") | quote+')') or ""}}
						{% endif %}
					{% else %}

						{{schInner.attribute}} {
						{% set indent = []%}    
						{{getInternalAttributes(name,provider_name,schInner.element.schema,args,schInner.attribute,indent)}}
						}
					{% endif %}
				{% endif %}
			{% endif %}
		{% endfor %}
	}
	{% if args | length == 0  %}
	`)
	{% else %}
	`, {{args | join(',\n')}})
	{% endif %}
	return resource
}
{% endmacro %}

{#----------------------------------------------Steps to check data source with Invalid Arguments--------------------------------------------------#}

{% macro printStepsForInvalidArgumentsDS(name, schemas) %}
{% for schema in schemas %}
{% if schema.required is true and schema.depends_on is not defined  and schema.type not in ["list", "set", "map"] %}
{
    Config:      CreateAcc{{name | pascalize}}DataSourceWithInvalid{{schema.attribute | pascalize}}(rName),
    ExpectError: regexp.MustCompile(""), // `(.)+ Object may not exists`
},
{% endif%}
{% endfor %}
{% endmacro%}

{#----------------------------------------------Function for data source with Invalid Arguments--------------------------------------------------#}

{% macro printFuncForInvalidArgumentsDS(name,provider_name,schemas)%}
	{{genAllRequiredAttr(name,provider_name,schemas)}}
	{% for func in allRequiredAttr %}
		func CreateAcc{{name | pascalize}}DataSourceWithInvalid{{func | eliminate_dots_and_capitalize}}(rName string) string {
			var resource string
			parentResources := getParent{{name | pascalize}}(rName)
			parentResources = parentResources[:len(parentResources)-1]
			resource += create{{name | pascalize}}Config(parentResources)
			resource += fmt.Sprintf(`
			data "{{provider_name | camelize}}_{{name | snakify}}" "test" {
			{% set args = [] %}
			{% for schema in schemas %}
				{% if schema.type not in ["list","set","map"] %}
					{% if schema.depends_on is defined %}

							{{schema.attribute}} = {{provider_name | camelize}}_{{schema.depends_on.resource_name | snakify}}.test.{{schema.depends_on.attribute_name | make_dot_string}}
					{% else %}
						{% if func | get_first == schema.attribute %}
							
							{{schema.attribute}} = {{getValueType(schema)}}
							{% if schema.type == "string" %}
							{{- args.append('"abcd"') or ""}}
							{% elif schema.type == "float" %}
							{{- args.append("1234.5678") or ""}}
							{% elif schema.type == "int" %}
							{{- args.append("1234") or ""}}
							{% endif %}
						{% else %}

							{{schema.attribute}} = {{getValueType(schema)}}
							{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schema.attribute, "valid", "0") | quote+')') or ""}}
						{% endif %}
					{% endif %}
				{% elif schema.type in ["list", "set"] %}
                    {% if schema.element.type == "schema" %}
                        {% if schema.element.schema.type not in ["list","set", "map"] %}

							{{schema.attribute}} = [{{getValueType(schema.element.schema)}}, {{getValueType(schema.element.schema)}}]
							{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schema.attribute, "valid", "0") | quote+')') or ""}}
							{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schema.attribute, "valid", "1") | quote+')') or ""}}
                        {% endif %}
                    {% else %}

						{{schema.attribute}} {
						{% set indent = []%}    
						{{getInternalAttributes(name,provider_name,schema.element.schema,args,schema.attribute,indent)}}
						}
					{% endif %}
				{% endif %}
			{% endfor %}
		}
	{% if args | length == 0  %}
	`)
	{% else %}
	`, {{args | join(',\n')}})
	{% endif %}
			return resource
		}
	{% endfor %}
{% endmacro %}


{#--------------------------------------------Function for data source Random Attr------------------------------------------------#}

{% macro printFuncUpdatedConfigDataSourceRandomAttr(name, provider_name, schemas) %}
func CreateAcc{{name | pascalize}}UpdatedConfigDataSourceRandomAttr(key, value, rName string) string {
	resource := CreateAcc{{name | pascalize}}ConfigWithOptional(rName)
	resource += fmt.Sprintf(`
	data "{{provider_name | camelize}}_{{name | snakify}}" "test" {
		{% set args = [] %}
		{% for schInner in schemas %}
			{% if schInner.required %}
				{% if schInner.type not in ["list","set","map"] %}

					{{schInner.attribute}} = {{provider_name | camelize}}_{{name | snakify}}.test.{{schInner.attribute}}
				{% elif schInner.type in ["list", "set"] %}
					{% if schInner.element.type == "schema" %}
						{% if schInner.element.schema.type not in ["list","set", "map"] %}

						{{schInner.attribute}} = [{{getValueType(schInner.element.schema)}},{{getValueType(schInner.element.schema)}}]
							{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schInner.attribute, "valid", "0") | quote+')') or ""}}
							{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schInner.attribute, "valid", "1") | quote+')') or ""}}
						{% endif %}
					{% else %}

						{{schInner.attribute}} {
						{% set indent = []%}    
						{{getInternalAttributes(name,provider_name,schInner.element.schema,args,schInner.attribute,indent)}}
						}
					{% endif %}
				{% endif %}
			{% endif %}
		{% endfor %}
		%s = "%s"
	}
	{% if args | length == 0  %}
	`, key, value)
	{% else %}
	`, {{args | join(',\n')}}, key, value)
	{% endif %}
	return resource
}
{% endmacro %}

{#-------------------------------------------Steps to check data source update config optional attribute------------------------------------------------#}

{# ***** Macro : **Currently Not Used** This will generate internal step for list,set having 'Elem' as resource for data source update config optional attribute  ***** #}
{% macro getInternalStepsForDSUpdateOptionalAttr(name, provider_name, schemas, parentAttr) %}
	{% for schema in schemas %}
		{% if schema.computed is true and schema.type not in ["list", "map", "set" ]%}
			valid = searchInObject(resource{{name | pascalize}}Test, {{[] | make_dot_string(parentAttr | eliminate_zeroes+ '.' +schema.attribute,"valid.0") | quote}})
			testSteps = append(testSteps,resource.TestStep{
				Config: CreateAcc{{name | pascalize}}UpdatedAttr{{parentAttr|eliminate_zeroes_and_capitalize+schema.attribute|pascalize}}(rName, valid),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttrPair(dataSourceName, {{[] | make_dot_string(parentAttr+ '.0.' +schema.attribute) | quote}}, resourceName, {{[] | make_dot_string(parentAttr+ '.0.' +schema.attribute) | quote}}),
				), 
			})
			
		{% elif schema.computed is true and schema.type in ["list", "set"] %}
			{% if schema.element.type == "schema" %}
				valid = searchInObject(resource{{name | pascalize}}Test, {{[] | make_dot_string(parentAttr | eliminate_zeroes + '.' +schema.attribute,"valid.0") | quote}})
				testSteps = append(testSteps,resource.TestStep{
					Config: CreateAcc{{name | pascalize}}UpdatedAttr{{parentAttr|eliminate_zeroes_and_capitalize+schema.attribute|pascalize}}(rName, valid),
					Check: resource.ComposeTestCheckFunc(
						resource.TestCheckResourceAttrPair(dataSourceName, {{[] | make_dot_string(parentAttr+ '.0.' +schema.attribute) | quote}}, resourceName, {{[] | make_dot_string(parentAttr+ '.0.' +schema.attribute) | quote}}),
					), 
				})
			{% elif schema.element.type == "resource" %}
				{{ getInternalStepsForDSUpdateOptionalAttr(name, provider_name, schema.element.schema, parentAttr+'.0.'+schema.attribute) }}
			{% endif %}
		{% endif %}
	{% endfor %}
{% endmacro %}

{% macro printGenerateStepsForDataSourceUpdatedOptionalAttr(name,provider_name,schemas) %}
	func generateStepForDataSourceUpdatedOptionalAttr{{name | pascalize}}(rName, dataSourceName, resourceName string) []resource.TestStep{
		testSteps := make([]resource.TestStep, 0, 1)
		var valid interface{} 
		{% for schema in schemas %}
			{% if schema.computed is true and schema.type not in ["list", "map", "set" ]%}
				valid = searchInObject(resource{{name | pascalize}}Test, {{[] | make_dot_string(schema.attribute,"valid.1") | quote}})
				testSteps = append(testSteps,resource.TestStep{
					Config: CreateAcc{{name | pascalize}}DataSourceUpdatedOptionalAttr{{schema.attribute|pascalize}}(rName, valid),
					Check: resource.ComposeTestCheckFunc(
						resource.TestCheckResourceAttrPair(dataSourceName, "{{schema.attribute}}", resourceName, "{{schema.attribute}}"),
					), 
				})
			{# For Future Use {% elif schema.computed is true and schema.type in ["list", "set"] %}
				{% if schema.element.type == "schema" %}
					valid = searchInObject(resource{{name | pascalize}}Test, {{[] | make_dot_string( schema.attribute,"valid.1") | quote}})
					testSteps = append(testSteps,resource.TestStep{
						Config: CreateAcc{{name | pascalize}}DataSourceUpdatedOptionalAttr{{schema.attribute|pascalize}}(rName, valid),
						Check: resource.ComposeTestCheckFunc(
							resource.TestCheckResourceAttrPair(dataSourceName, "{{schema.attribute}}", resourceName, {{[] | make_dot_string(schema.attribute+'.0') | quote}}),
						), 
					})
				{% else %}
					{{ getInternalStepsForDSUpdateOptionalAttr(name, provider_name, schema.element.schema, schema.attribute) }}
				{% endif %}#}
			{% endif %}
		{% endfor %}
		return testSteps
	}
{% endmacro %}	

{#-------------------------------------------Function for data source update config optional attribute------------------------------------------------#}

{% set allComputedFunctions = [] %}

{# ***** Macro : This will store the computed attribute for (list,set) in list for data source ***** #}
{% macro genUpdateComputedFunctionInternal(name, provider_name, schemas, parentAttr) %}
	{% for schema in schemas %}
		{% if schema.computed is true and schema.type not in ["list", "map", "set" ]%}
			{{allComputedFunctions.append(parentAttr +"."+ schema.attribute) or ""}}
		{% elif schema.computed is true and schema.type in ["list", "set"] %}
			{% if schema.element.type == "schema" %}
				{{allComputedFunctions.append(parentAttr + '.'+ schema.attribute) or ""}}
			{% elif schema.element.type == "resource" %}
				{{ genUpdateComputedFunctionInternal(name, provider_name, schema.element.schema, parentAttr+'.'+schema.attribute) }}
			{% endif %}
		{% endif %}
	{% endfor %}
{% endmacro %}

{# ***** Macro : This will store the computed attribute in list for data source ***** #}
{% macro genUpdateComputedFunction(name,provider_name,schemas) %}
		{% for schema in schemas %}
			{% if schema.computed is true and schema.type not in ["list", "map", "set" ] %}
				{{allComputedFunctions.append(schema.attribute) or ""}}
			{# For Future Use{% elif schema.computed is true and schema.type in ["list", "set"] %}
				{% if schema.element.type == "schema" %}
					{{allComputedFunctions.append(schema.attribute) or ""}}
				{% else %}
					{{ genUpdateComputedFunctionInternal(name, provider_name, schema.element.schema, schema.attribute) }}
				{% endif %} #}
			{% endif %}
		{% endfor %}
{% endmacro %}

{% macro printFuncForDataSourceUpdatedOptionalAttr(name,provider_name,schemas)%}
	{% for func in allComputedFunctions %}
		func CreateAcc{{name | pascalize}}DataSourceUpdatedOptionalAttr{{func | eliminate_dots_and_capitalize}}(rName string,value interface{}) string {
			var resource string
			parentResources := getParent{{name | pascalize}}(rName)
			parentResources = parentResources[:len(parentResources)-1]
			resource += create{{name | pascalize}}Config(parentResources)
			resource += fmt.Sprintf(`
			resource "{{provider_name | camelize}}_{{name | snakify}}" "test" {
			{% set args = [] %}
			{% for schema in schemas %}
				{% if schema.type not in ["list","set","map"] and schema.exclude is not true %}
					{% if schema.depends_on is defined %}

							{{schema.attribute}} = {{provider_name | camelize}}_{{schema.depends_on.resource_name | snakify}}.test.{{schema.depends_on.attribute_name | make_dot_string}}
					{% else %}
						{% if func | get_first == schema.attribute %}
							
							{{schema.attribute}} = {{getValueType(schema)}}
							{{- args.append('value') or ""}}
						{% else %}

							{{schema.attribute}} = {{getValueType(schema)}}
							{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schema.attribute, "valid", "0") | quote+')') or ""}}
						{% endif %}
					{% endif %}
				{% elif schema.type in ["list", "set"] and schema.exclude is not true %}
                    {% if schema.element.type == "schema" %}
                        {% if schema.element.schema.type not in ["list","set", "map"] %}
							{% if func | get_first == schema.attribute %}

							{{schema.attribute}} = [{{getValueType(schema.element.schema)}}]
							{{- args.append('value') or ""}}
							{% else %}

							{{schema.attribute}} = [{{getValueType(schema.element.schema)}}, {{getValueType(schema.element.schema)}}]
							{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schema.attribute, "valid", "0") | quote+')') or ""}}
							{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schema.attribute, "valid", "1") | quote+')') or ""}}
							{% endif %}
                        {% endif %}
                    {% else %}
						{% if func|get_first == schema.attribute %}

							{{schema.attribute}} {
							{% set indent = []%}    
							{{getInternalAttributesForUpdatedAttr(name,provider_name,schema.element.schema,args,schema.attribute,func | eliminate_first,indent)}}
							}
						{% else %}

							{{schema.attribute}} {
							{% set indent = []%}    
							{{getInternalAttributes(name,provider_name,schema.element.schema,args,schema.attribute,indent)}}
							}
						{% endif %}
					{% endif %}
				{% endif %}
			{% endfor %}
			}
			{% if args | length == 0  %}
			`)
			{% else %}
			`, {{args | join(',\n')}})
			{% endif %}
		resource += fmt.Sprintf(`
		data "{{provider_name | camelize}}_{{name | snakify}}" "test" {
			{% set args = [] %}
			{% for schInner in schemas %}
				{% if schInner.required %}
					{% if schInner.type not in ["list","set","map"] %}

						{{schInner.attribute}} = {{provider_name | camelize}}_{{name | snakify}}.test.{{schInner.attribute}}
					{% elif schInner.type in ["list", "set"] %}
						{% if schInner.element.type == "schema" %}
							{% if schInner.element.schema.type not in ["list","set", "map"] %}

							{{schInner.attribute}} = [{{getValueType(schInner.element.schema)}},{{getValueType(schInner.element.schema)}}]
								{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schInner.attribute, "valid", "0") | quote+')') or ""}}
								{{- args.append('searchInObject(resource'+name|pascalize+'Test, '+ [] | make_dot_string(schInner.attribute, "valid", "1") | quote+')') or ""}}
							{% endif %}
						{% else %}

							{{schInner.attribute}} {
							{% set indent = []%}    
							{{getInternalAttributes(name,provider_name,schInner.element.schema,args,schInner.attribute,indent)}}
							}
						{% endif %}
					{% endif %}
				{% endif %}
			{% endfor %}
		}
		{% if args | length == 0  %}
		`)
		{% else %}
		`, {{args | join(',\n')}})
		{% endif %}
			return resource
		}
	{% endfor %}
{% endmacro %}