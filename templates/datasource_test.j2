{% import './helpers/schema.j2' as schemaHelper %}
{% import './helpers/test.j2' as testHelper %}
package {{provider_name | camelize}}

import(
    {% for import in imports  %}
    "{{ import }}"
    {% endfor %}
)


func TestAcc{{provider_name | pascalize}}{{name | pascalize}}DataSource_Basic(t *testing.T) {
	resourceName := "{{provider_name | camelize}}_{{name | camelize}}.test"
    dataSourceName := "data.{{provider_name | camelize}}_{{name | camelize}}.test"
	randomParameter := acctest.RandStringFromCharSet(5, "abcdefghijklmnopqrstuvwxyz")
	randomValue := acctest.RandString(5)
	rName := acctest.RandString(5)
    resource.ParallelTest(t, resource.TestCase{
		PreCheck:          func() { testAccPreCheck(t) },
		ProviderFactories: providerFactories,
		CheckDestroy:      testAccCheck{{provider_name | pascalize}}{{name | pascalize}}Destroy,
		Steps: append([]resource.TestStep{

			{{testHelper.printStepsWithoutRequiredArgumentsDS(name, schemas)}}
            {
				Config: CreateAcc{{name|pascalize}}DataSourceConfig(rName),
				Check: resource.ComposeTestCheckFunc(
					{{testHelper.printStepsForConfigDataSource(schemas)}}
				),
			},
            {
				Config:      CreateAcc{{name | pascalize}}UpdatedConfigDataSourceRandomAttr(randomParameter, randomValue, rName),
				ExpectError: regexp.MustCompile(`An argument named (.)+ is not expected here.`),
			},
			{{testHelper.printStepsForInvalidArgumentsDS(name, schemas)}}
		}, generateStepForDataSourceUpdatedOptionalAttr(dataSourceName, resourceName)...),
	})
}



{#---------------------------------------Without Required--------------------------------------#}
{{'\n'+testHelper.printFunctionWithoutRequiredArgumentsDS(name, provider_name, schemas)}}

{#---------------------------------------Data Source Config------------------------------------#}
{{testHelper.printFunctionForDataSourceConfig(name, provider_name, schemas)}}

{#-------------------------------------Data Source Random Attr---------------------------------#}
{{testHelper.printFuncUpdatedConfigDataSourceRandomAttr(name, provider_name, schemas)}}

{#------------------------------------Data Source Invalid Arguments----------------------------#}
{{testHelper.printFuncForInvalidArgumentsDS(name,provider_name,schemas)}}

{#------------------------------------Data Source Update Config Optional-----------------------#}
{{testHelper.genUpdateComputedFunction(name,provider_name,schemas)}}
{{testHelper.printGenerateStepsForDataSourceUpdatedOptionalAttr(name,provider_name,schemas)}}
{{testHelper.printFuncForDataSourceUpdatedOptionalAttr(name,provider_name,schemas)}}


{#func CreateAcc{{name | pascalize}}UpdatedConfigDataSource(key, value string) string {
	fmt.Println("=== STEP  Basic: testing {{name | pascalize}} data source with updated resource")
	resource := CreateAcc{{name | pascalize}}UpdatedAttr(key,value) //from resource_test
	resource += fmt.Sprintf(`
	data "{{provider_name | camelize}}_{{name | camelize}}" "test" {
		{% for schema in schemas %}
			{% if schema.required is true  %}
			{{schema.attribute}} = {{provider_name | camelize}}_{{name | camelize}}.test.{{schema.attribute}}
			{% endif %}
		{% endfor %}
	}
	`)
	return resource
}#}


