{% import './helpers/schema.j2' as schemaHelper %}
package acctest

import(
    {% for import in imports  %}
    "{{ import }}"
    {% endfor %}
)

func TestAcc{{provider_name | pascalize}}{{name | pascalize}}DataSource_Basic(t *testing.T) {
	resourceName := "{{provider_name | camelize}}_{{name | camelize}}.test"
    dataSourceName := "data.{{provider_name | camelize}}_{{name | camelize}}.test"
    rName := makeTestVariable(acctest.RandString(5))
	randomParameter := acctest.RandStringFromCharSet(5, "abcdefghijklmnopqrstuvwxyz")
	randomValue := acctest.RandString(5)
    resource.Test(t, resource.TestCase{
		PreCheck:          func() { testAccPreCheck(t) },
		ProviderFactories: testAccProviders,
		CheckDestroy:      testAccCheck{{provider_name | pascalize}}{{name | pascalize}}Destroy,
		Steps: []resource.TestStep{
            {% for schema in schemas %}
			    {{ schemaHelper.getRequiredDNFunc(name,schema) }}
			{% endfor %}
            {
				Config: CreateAcc{{name | pascalize}}ConfigDataSource(rName),
				Check: resource.ComposeTestCheckFunc(
					{% for schema in schemas %}
			        	{{ schemaHelper.getTestAttr(schema) }}
			        {% endfor %}
				),
			},
            {
				Config:      CreateAcc{{name | pascalize}}DataSourceUpdate(rName, randomParameter, randomValue),
				ExpectError: regexp.MustCompile(`An argument named (.)+ is not expected here.`),
			},

			{
				Config:      CreateAcc{{name | pascalize}}WithInvalidParentDn(rName),
				ExpectError: regexp.MustCompile(`(.)+ Object may not exists`),
			},

			{
				Config: CreateAcc{{name | pascalize}}DataSourceUpdatedResource(rName, "annotation", "orchestrator:terraform-testacc"),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttrPair(dataSourceName, "annotation", resourceName, "annotation"),
				),
			},
        },
	})
}

{% for schema in schemas %}
	{{ schemaHelper.getRequiredDNFuncWithoutVar(provider_name,name,schema) }}
{% endfor %}


func CreateAcc{{name | pascalize}}ConfigDataSource(rName string) string {
	fmt.Println("=== STEP  Basic: testing {{name | pascalize}} data source creation with required arguments only")
	resource := fmt.Sprintf(`
		{{ schemaHelper.getParent(name) }}

	data "{{provider_name | camelize}}_{{name | camelize}}" "test" {
		tenant_dn = {{provider_name | camelize}}_{{name | camelize}}.test.tenant_dn
		name = {{provider_name | camelize}}_{{name | camelize}}.test.name
	}
	`, rName, rName)
	return resource
}