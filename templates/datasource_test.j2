{% import './helpers/schema.j2' as schemaHelper %}
package acctest

import(
    {% for import in imports  %}
    "{{ import }}"
    {% endfor %}
)

{# remove below var after resource_test#}
//remove after resource_test 
var resourceContractTest = map[string]interface{}{
	"name" : map[string]interface{}{
		"valid": []string{ "Hello", "World" },
		"invalid": []interface{}{ 234, 987 },
	},
	"id" : map[string]interface{}{
		"valid": []int{ 234, 987 },
		"invalid": []interface{}{ "Hello", "World" },
	},
	"weight" : map[string]interface{}{
		"valid": []float64{ 23.4, 987 },
		"invalid": []interface{}{ "Hello", "World" },
	},
		"ipv4_for" : map[string]interface{}{
			"valid": Test["ipv4"].(map[string]interface{})["valid"].([]string),
			"invalid": Test["ipv4"].(map[string]interface{})["invalid"].([]interface{}),
		},
	"port_number" : map[string]interface{}{
		"valid": []int{ 1, 53, 65535 },
		"invalid": []interface{}{ 0, 65536 },
	},
	"test_score" : map[string]interface{}{
		"valid": []int{ 1, 100, 50 },
		"invalid": []interface{}{ 0, 101 },
	},
			"valid_cidr" : map[string]interface{}{
				"valid": []int{ 0, 32 },
				"invalid": []int{349, 57},
			},

}
func TestAcc{{provider_name | pascalize}}{{name | pascalize}}DataSource_Basic(t *testing.T) {
	resourceName := "{{provider_name | camelize}}_{{name | camelize}}.test"
    dataSourceName := "data.{{provider_name | camelize}}_{{name | camelize}}.test"
	randomParameter := acctest.RandStringFromCharSet(5, "abcdefghijklmnopqrstuvwxyz")
	randomValue := acctest.RandString(5)
    resource.Test(t, resource.TestCase{
		PreCheck:          func() { testAccPreCheck(t) },
		ProviderFactories: testAccProviders,
		CheckDestroy:      testAccCheck{{provider_name | pascalize}}{{name | pascalize}}Destroy,
		Steps: []resource.TestStep{
            {% for schema in schemas %}
			    {{ schemaHelper.getRequiredDNFunc(name,schema) }}
			{% endfor %}
            {
				Config: CreateAcc{{name | pascalize}}ConfigDataSource(),
				Check: resource.ComposeTestCheckFunc(
					{% for schema in schemas %}
			        	{{ schemaHelper.getTestAttr(schema) }}
			        {% endfor %}
				),
			},
            {
				Config:      CreateAcc{{name | pascalize}}UpdatedConfigDataSourceRandomAttr(randomParameter, randomValue),
				ExpectError: regexp.MustCompile(`An argument named (.)+ is not expected here.`),
			},

			{
				Config:      CreateAcc{{name | pascalize}}DataSourceWithInvalidName(),
				ExpectError: regexp.MustCompile(`(.)+ Object may not exists`),
			},

			{
				{% for schema in schemas %}
				{% if schema.optional is true and schema.type == "string" %}
				Config: CreateAcc{{name | pascalize}}UpdateConfigDataSource("{{schema.attribute}}", randomValue),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttrPair(dataSourceName,"{{schema.attribute}}", resourceName,"{{schema.attribute}}"),
					),
					{% endif %}
				{% endfor %}
			},
        },
	})
}


{{ schemaHelper.getRequiredDNFuncWithoutVar(provider_name,name,schemas) }}


func CreateAcc{{name | pascalize}}ConfigDataSource() string {
	fmt.Println("=== STEP  Basic: testing {{name | pascalize}} data source creation with required arguments only")
	resource := CreateAcc{{name | pascalize}}Config() //from resource_test
	resource += fmt.Sprintf(`

	data "{{provider_name | camelize}}_{{name | camelize}}" "test" {
		{% for schema in schemas %}
			{% if schema.required is true  %}
			{{schema.attribute}} = {{provider_name | camelize}}_{{name | camelize}}.test.{{schema.attribute}}
			{% endif %}
		{% endfor %}
	}
	`)
	return resource
}


func CreateAcc{{name | pascalize}}UpdatedConfigDataSourceRandomAttr(key, value string) string {
	fmt.Println("=== STEP  Basic: testing {{name | pascalize}} data source creation with random attributes")
	resource := CreateAcc{{name | pascalize}}Config() //from resource_test
	resource += fmt.Sprintf(`

	data "{{provider_name | camelize}}_{{name | camelize}}" "test" {
		{% for schema in schemas %}
			{% if schema.required is true  %}
			{{schema.attribute}} = {{provider_name | camelize}}_{{name | camelize}}.test.{{schema.attribute}}
			{% endif %}
		{% endfor %}
			%s = "%s"
	}
	`,key, value)
	return resource
}


func CreateAcc{{name | pascalize}}DataSourceWithInvalidName() string {
	fmt.Println("=== STEP  Basic: testing {{name | pascalize}} data source with invalid name")
	resource := CreateAcc{{name | pascalize}}Config() //from resource_test
	resource += fmt.Sprintf(`
	data "{{provider_name | camelize}}_{{name | camelize}}" "test" {
		{% for schema in schemas %}
			{% if schema.required is true and schema.attribute != "name" %}
			{{schema.attribute}} = {{provider_name | camelize}}_{{name | camelize}}.test.{{schema.attribute}}
			{% endif %}
		{% endfor %}
			name = "${ {{provider_name | camelize}}_{{name | camelize}}.test.name}abc"
	}
	`)
	return resource
}


func CreateAcc{{name | pascalize}}UpdatedConfigDataSource(key, value string) string {
	fmt.Println("=== STEP  Basic: testing {{name | pascalize}} data source with updated resource")
	resource := CreateAcc{{name | pascalize}}UpdatedAttr(key,value) //from resource_test
	resource += fmt.Sprintf(`
	data "{{provider_name | camelize}}_{{name | camelize}}" "test" {
		{% for schema in schemas %}
			{% if schema.required is true  %}
			{{schema.attribute}} = {{provider_name | camelize}}_{{name | camelize}}.test.{{schema.attribute}}
			{% endif %}
		{% endfor %}
	}
	`)
	return resource
}


{#remove below func after resource_test#}
//remove after resource_test
func CreateAccContractConfig() string {
	resource := fmt.Sprintf(`
	resource "aci_tenant" "test"{
		name = "abcd"
	}
	resource "aci_contract" "test" {
		tenant_dn = aci_tenant.test.id
		name = "xyzw"
	}
	`)
	return resource
}

{#remove below func after resource_test#}
//remove after resource_test
func CreateAccContractUpdatedAttr(attribute, value string) string {
	resource := fmt.Sprintf(`
	resource "aci_tenant" "test"{
		name = "abcd"
	}
	resource "aci_contract" "test"{
		tenant_dn = aci_tenant.test.id
		name = "xyzw"
		%s = "%s"
	}
	`,attribute, value)
	return resource
}