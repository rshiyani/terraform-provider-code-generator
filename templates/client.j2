{#}{#}{#}{#}
{#} getFuncName generates the function name from the HTTP Type {#}
{#} and the endpoint name provided from the yaml config unless {#}
{#} the funcName is provided.                                  {#}
{#} Ex:                                                        {#}
{#}   endpoints:                                               {#}
{#}     - ...                                                  {#}
{#}       name: **movie**                                      {#}
{#}       **GET**:                                             {#}
{#}           ...                                              {#}
{#}       POST:                                                {#}
{#}           ...                                              {#}
{#} getFuncName(endpoint[0], GET) -> GetMovie                  {#}
{#}{#}
{%- macro getFuncName(endpoint, method) %}
{%      if endpoint[method].funcName is defined %}
{{          endpoint[method].funcName }}
{%-      else %}
{{          method | capitalize }}{{ endpoint.name | capitalize }}
{%-      endif %}
{% endmacro %}

{#}{#}{#}{#}
{#} getArguments generates the comma separated list of arguments {#}
{#} from the arguments with the specified name and type          {#}
{#} Ex:                                                          {#}
{#}     args:                                                    {#}
{#}         - name: movieName                                    {#}
{#}           type: string                                       {#}
{#}         - name: movieId                                      {#}
{#}           type: int                                          {#}
{#} getArguments: movieName string, movieId int                  {#}
{#}{#}
{%- macro getArguments(endpoint, method) %}
{%      for arg in endpoint[method].args %}
{%          if not loop.last %}{{arg.name}} {{ "*" if arg.pointer }}{{arg.type}}, {% else %}{{arg.name}} {{ "*" if arg.pointer }}{{arg.type}}{% endif %}
{%      endfor %}
{% endmacro %}

{#}{#}{#}{#}
{#} parameterizURL take the url and the query params and replaces {#}
{#} the query params inside url with %s so that the url can be    {#}
{#} dynamically constructed by putting the value of the params at {#}
{#} %s using fmt.Printf                                           {#}
{#} Ex:                                                           {#}
{#}   endpoints:                                                  {#}
{#}     - ...                                                     {#}
{#}       path: **/movie/id**                                     {#}
{#}       params:                                                 {#}
{#}           - **id**                                            {#}
{#} parameterizURL(/movie/id, [id]) -> /movie/%s                  {#}
{#}{#}
{%- macro parameterizeURL(url, params) %}
{%      set urlList = url.split("/") %}
{#
    when splitting a path that begins with a "/",   
    the first element can be ""
#}
{%      if urlList[0] == "" %}
{%          set urlList = urlList[1:] %}
{%      endif %}
{%      set newList = ["%s"] %}
{%      for param in urlList %}
{%          if param in params %}
{{              newList.append("%s") or "" }}
{%-          else %}
{{              newList.append(param) or "" }}
{%-          endif %}
{%      endfor %}
{{ newList | join("/") -}}
{% endmacro %}

{#}{#}{#}{#}
{#} parameters takes params array and returns the comma        {#}
{#} separated list of parameters                               {#}
{#}{#}
{%- macro parameters(params) %}
{{      "c.BaseURL, " if params | length > 0 else "c.BaseURL" -}}
{{      params | join(", ") if params is defined -}}
{% endmacro %}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package client

import (
	"fmt"
	"encoding/json"

	"github.com/Jeffail/gabs"
{% for module in include %}
	"{{ module }}"
{% endfor %}
)

{#  
    DELETE method does not return a container 
    e -> an endpoint inside endpoints array
    m -> represents one of the method inside an endpoint
#}
{% for e in endpoints %}
{%      set methods = ["GET", "POST", "PUT", "DELETE"] %}
{%      for m in methods %}
{%          if e[m] is defined %}
func (c *Client) {{getFuncName(e, m)}}({{getArguments(e, m)}}) ({{"*gabs.Container, " if m != "DELETE" }}error) {
{#
    only POST and PUT calls can contain body
#}
{%              set vars = {containsBody: false, varToSend: none } %}
{%              for item in e[m].args if m == "POST" or m == "PUT" %}
{%                  if item.send == true %}
{%                       if vars.update({"containsBody": true, "varToSend": item.name}) %} {% endif %}
{%                  endif %}
{%              endfor %}
{%              if vars.containsBody %}
    reqBody, err := json.Marshal({{vars.varToSend}})
    if err != nil {
        return nil, err
    }

{%              endif %}
    url := fmt.Sprintf("{{parameterizeURL(e.path, e.params)}}", {{parameters(e.params)}})
    return c.{{m | capitalize}}(url{{ ", reqBody" if vars.containsBody else "" }})
}

{%          endif %}
{%      endfor %}
{% endfor %}